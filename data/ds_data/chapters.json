[
    {
        "id": "c01",
        "title": "绪论",
        "parent_id": "",
        "order": "integer",
        "description": "本章内容是数据结构概述。读者可通过对本章的学习，初步了解数据结\n构的基本内容和基本方法。分析算法的时间复杂度和空间复杂度是本章重点，需要熟练掌握，算\n法设计题通常都会要求分析时间复杂度、空间复杂度，同时会出现考查时间复杂度的选择题。",
        "knowledge_points": [
            "knowledge_point_id"
        ],
        "sub_chapters": [
            "chapter_id"
        ]
    },
    {
        "id": "c02",
        "title": "线性表",
        "parent_id": "",
        "order": "integer",
        "description": "线性表是算法题命题的重点。这类算法题的实现比较容易且代码量较少，但是要求具有最优\n的性能（时间/空间复杂度），才能获得满分。因此，应牢固掌握线性表的各种基本操作（基于两\n种存储结构），在平时的学习中多注重培养动手能力。另需提醒的是，算法最重要的是思想！考\n场上的时间紧迫，在试卷上不一定要求代码具有实际的可执行性，因此应尽力表达出算法的思想\n和步骤，而不必过于拘泥所有细节。此外，采用时间/空间复杂度较差的方法也能拿到大部分分数，",
        "knowledge_points": [
            "knowledge_point_id"
        ],
        "sub_chapters": [
            "chapter_id"
        ]
    },
    {
        "id": "c03",
        "title": "栈和队列和数组",
        "parent_id": "",
        "order": "integer",
        "description": "本章通常以选择题的形式考查，题目不算难，但命题的形式比较灵活，其中栈（出入栈的过\n程、出栈序列的合法性）和队列的操作及其特征是重点。因为它们均是线性表的应用和推广，所\n以也容易出现在算法设计题中。此外，栈和队列的顺序存储、链式存储及其特点，双端队列的特\n点，栈和队列的常见应用，以及数组和特殊矩阵的压缩存储都是读者必须掌握的内容。",
        "knowledge_points": [
            "knowledge_point_id"
        ],
        "sub_chapters": [
            "chapter_id"
        ]
    },
    {
        "id": "c04",
        "title": "串",
        "parent_id": "",
        "order": "integer",
        "description": "本章是统考大纲第6章内容，采纳读者建议单独作为一章，大纲只要求掌握字符中模式匹配，\n重点掌握KMP匹配算法的原理及next数组的推理过程，手工求next数组可以先计算出部分\n匹配值表然后变形，或根据公式来求解。了解nextval数组的求解方法。\n*4.1\n串的定义和实现?\n字符串简称串，计算机上非数值处理的对象基本都是字符中数据。我们常见的信息检索系统\n（如搜索引擎）、文本编辑程序（如Word）、问答系统、自然语言翻译系统等，都是以字符串数据\n作为处理对象的。本章详细介绍字符串的存储结构及相应的操作。",
        "knowledge_points": [
            "knowledge_point_id"
        ],
        "sub_chapters": [
            "chapter_id"
        ]
    },
    {
        "id": "c05",
        "title": "树和二叉树",
        "parent_id": "",
        "order": "integer",
        "description": "本章内容多以选择题或综合题的形式考查，但统考也会出涉及树遍历相关的算法题。树和二\n叉树的性质、遍历操作、转换、存储结构和操作特性等，满二叉树、完全二叉树、线索二叉树、\n哈夫曼树的定义和性质，都是选择题必然会涉及的内容。",
        "knowledge_points": [
            "knowledge_point_id"
        ],
        "sub_chapters": [
            "chapter_id"
        ]
    },
    {
        "id": "c06",
        "title": "图",
        "parent_id": "",
        "order": "integer",
        "description": "图算法的难度较大，主要掌握深度优先搜索与广度优先搜索。掌握图的基本概念及基本性\n质、图的存储结构（邻接矩阵、邻接表、邻接多重表和十字链表）及特性、存储结构之间的转\n化、基于存储结构上的各种遍历操作和各种应用（拓扑排序、最小生成树、最短路径和关键路\n径）等。图的相关算法较多，通常只需掌握其基本思想和实现步骤，而实现代码不是重点。",
        "knowledge_points": [
            "knowledge_point_id"
        ],
        "sub_chapters": [
            "chapter_id"
        ]
    },
    {
        "id": "c07",
        "title": "查找",
        "parent_id": "",
        "order": "integer",
        "description": "本章是考研命题的重点。对于折半查找，应掌握折半查找的过程、构造判定树、分析平均查找\n长度等。对于二叉排序树、二叉平衡树和红黑树，要了解它们的概念、性质和相关操作等。B树\n和B+树是本章的难点。对于B树，考研大纲要求掌握插入、删除和查找的操作过程；对于B+树，\n仅要求了解其基本概念和性质。对于散列查找，应掌握散列表的构造、冲突处理方法（各种方法的\n处理过程）、查找成功和查找失败的平均查找长度、散列查找的特征和性能分析。",
        "knowledge_points": [
            "knowledge_point_id"
        ],
        "sub_chapters": [
            "chapter_id"
        ]
    },
    {
        "id": "c08",
        "title": "排序",
        "parent_id": "",
        "order": "integer",
        "description": "堆排序、快速排序和归并排序是本章的重难点。读者应深入掌握各种排序算法的思想、排序\n过程（能动手模拟）和特征（初态的影响、复杂度、稳定性、适用性等），通常以选择题的形式\n考查不同算法之间的对比。此外，对于一些常用排序算法的关键代码，要达到熟练编写的程度；\n看到某特定序列，读者应具有选择最优排序算法（根据排序算法特征）的能力。",
        "knowledge_points": [
            "knowledge_point_id"
        ],
        "sub_chapters": [
            "chapter_id"
        ]
    }
]