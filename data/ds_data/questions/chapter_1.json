[
    {
        "id": "q011002",
        "title": "非线性数据结构",
        "content": "下列四种数据结构中，（）是非线性数据结构。\nA.树\nB.字符串\nC.队列\nD.栈",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0111"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "A",
            "key_points": [
                "string"
            ],
            "explanation": "树和图是典型的非线性数据结构，其他选项都属于线性数据结构。"
        }
    },
    {
        "id": "q011003",
        "title": "逻辑结构选项",
        "content": "下列选项中，属于逻辑结构的是（\nA.顺序表\nB.哈希表\nC.有序表\nD.单链表",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0111"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "C",
            "key_points": [
                "string"
            ],
            "explanation": "顺序表、哈希表和单链表是三种不同的数据结构，既描述逻辑结构，又描述存储结构和数据\n运算。而有序表是指关键字有序的线性表，仅描述元素之间的逻辑关系，它既可以链式存储，又\n可以顺序存储，所以属于逻辑结构。"
        }
    },
    {
        "id": "q011004",
        "title": "数据结构的基本概念",
        "content": "下列关于数据结构的说法中，正确的是（）。\nA.数据的逻辑结构独立于其存储结构\nB.数据的存储结构独立于其逻辑结构\nC.数据的逻辑结构唯一决定其存储结构\nD.数据结构仅由其逻辑结构和存储结构决定",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0111"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "A",
            "key_points": [
                "string"
            ],
            "explanation": "数据的逻辑结构是从面向实际问题的角度出发的，只采用抽象表达方式，独立于存储结构，\n立于逻辑结构而存在。数据结构包括三个要素，缺一不可。\n05．C公众号：小兔网盘免费分享无水印PDF\n在存储数据时，不仅要存储数据元素的值，而且要存储数据元素之间的关系。"
        }
    },
    {
        "id": "q011005",
        "title": "数据存储中的元素关系",
        "content": "在存储数据时，通常不仅要存储各数据元素的值，而且要存储（）。\nA.数据的操作方法\nB.数据元素的类型\nC.数据元素之间的关系\nD.数据的存取方法",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0111"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "未找到",
            "key_points": [
                "string"
            ],
            "explanation": "未找到解析"
        }
    },
    {
        "id": "q012001",
        "title": "算法的重要特性",
        "content": "一个算法应该具有（）等重要特性。\nA.可维护性、可读性和可行性\nB.可行性、确定性和有穷性\nC.确定性、有穷性和可靠性\nD.可读性、正确性和可行性",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0111"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "B",
            "key_points": [
                "string"
            ],
            "explanation": "一个算法应具有五个重要特性：有穷性、确定性、可行性、输入和输出。选项A、C和D中\n提到的特性（如可维护性、可读性、可靠性、正确性等）是很重要的，但它们并不是算法定义的\n重要特性，更多的是关于软件开发中的附加要求。"
        }
    },
    {
        "id": "q012002",
        "title": "算法特性与时间复杂度",
        "content": "下列关于算法的说法中，正确的是（）。\nA.算法的时间效率取决于算法执行所花的CPU时间\nB.在算法设计中不允许用牺牲空间效率的方式来换取好的时间效率\nC.算法必须具备有穷性、确定性等五个特性\nD.通常用时间效率和空间效率来衡量算法的优劣\n03．某算法的时间复杂度为O(n²)，则表示该算法的（）。\nA．问题规模是n²\nB.执行时间等于n²\nC.执行时间与n²成正比\nD.问题规模与n²成正比",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0111"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "C",
            "key_points": [
                "string"
            ],
            "explanation": "算法的时间效率是指算法的时间复杂度，即执行算法所需的计算工作量，选项A错误。算法\n设计会综合考虑时间效率和空间效率两个方面，若某些应用场景对时间效率要求很高，而对空间\n“优劣”不仅要考虑算法的时空效率，还要从正确性、可读性、健壮性等方面来综合评价。"
        }
    },
    {
        "id": "q012004",
        "title": "空间复杂度O(1)的含义",
        "content": "若某算法的空间复杂度为O（1)，则表示该算法（）。\nA．不需要任何辅助空间\nB.所需辅助空间大小与问题规模n无关\nC.不需要任何空间\nD.所需空间大小与问题规模n无关",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0111"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "B",
            "key_points": [
                "string"
            ],
            "explanation": "算法的空间复杂度为O(1)，表示执行该算法所需的辅助空间大小相比输入数据的规模来说是\n一个常量，而不表示该算法执行时不需要任何空间或辅助空间。"
        }
    },
    {
        "id": "q012005",
        "title": "时间复杂度最小函数",
        "content": "下列关于时间复杂度的函数中，时间复杂度最小的是（）。\nA. T(n) = nlog2n + 5000n\nB. T(n)= n² - 8000n\nC. T;(n)= nlog2n - 6000n\nD. T4(n)= 20000log2n",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0111"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "D",
            "key_points": [
                "string"
            ],
            "explanation": "A的最高阶是nlog2n，时间复杂度是O(nlog2n)。B的最高阶是n²，时间复杂度是O(n²)。C\n的最高阶是nlog2n，时间复杂度是O(nlog2n)。D的最高阶是log2n，时间复杂度是O(log2n)。"
        }
    },
    {
        "id": "q012006",
        "title": "算法时间复杂度分析",
        "content": "下列算法的时间复杂度为（）。\nvoid fun(int n){\nint i=l;\nwhile(i<=n)\ni=i*2;\nA. O(n)\nB. O(n²)\nC. O(nlog2n)\nD. O(log2n)",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0111"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "D",
            "key_points": [
                "string"
            ],
            "explanation": "找出基本运算i=i*2，设执行次数为t，2'≤n，即1≤log2n，故时间复杂度T(n)=O(log2n)。\n更直观的方法：计算基本运算i=i*2的执行次数（每执行一次i乘以2），其中判断条件可\n理解为2'=n，即t= log2n，则T(n)=O(log2n)。"
        }
    },
    {
        "id": "q012007",
        "title": "算法时间复杂度与频度分析",
        "content": "下列算法的时间复杂度为（）。\nvoid fun(int n){\n第1章绪\n论\nint i=0;\nwhile(i*i*i<=n)\ni++;\n公众号：小兔网盘免费分享无水印PDF\nA. O(n)\nB. O(nlog2n)\nC. 0(n)\nD. 0(√n)\n08．某个程序段如下：\nfor(i=n-l;i>1;i--)\nfor(j=1;j<i;j++)\nif(A[j]>A[j+1])\nA[j]与A[j+1]对换；\n其中n为正整数，则最后一行语句的频度在最坏情况下是（）。\nA. O(n)\nB. O(nlog2n)\nC. 0(n)\nD. O(m²)",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0111"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "C",
            "key_points": [
                "string"
            ],
            "explanation": "基本运算为i++，设执行次数为1，有xix≤n，即≤n。因此有≤n，则 T(n)=O（）。"
        }
    },
    {
        "id": "q012009",
        "title": "程序段时间复杂度与算法执行次数分析",
        "content": "下列程序段的时间复杂度为（）。\nif(n>=0）{\nfor（int i=0;i<n;i++)\nfor（int j=0;j<n;j++)\nprintf（\"输入数据大于或等于零\\n\")\nelset\nfor（int j=0;j<n;j++)\nprintf（\"输入数据小于零\\n\"）\n{\nA. 0(n²)\nB. O(n)\nC. 0(1)\nD. O(nlog2n)\n10．下列算法中加下画线的语句的执行次数为（）。\nint m=0,i，j;\nfor（i=1;i<=n;i++)\nfor(j=1;j<=2*i;j++)\nm++;\nA.n(n+1)\nB.n\nC. n+1\nD. n²\n11.\n下列函数代码的时间复杂度是（）。\nint Func（int n){\nif（n==1) return 1;\nelse return 2*Func(n/2)+n;\nA. O(n)\nB. O(nlog2n)\nC. O(log2n)\nD. 0(n²)",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0111"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "A",
            "key_points": [
                "string"
            ],
            "explanation": "当程序段中有条件判断语句时，取分支路径上的最大时间复杂度。"
        }
    },
    {
        "id": "q012012",
        "title": "程序段时间复杂度分析",
        "content": "【2011统考真题】设n是描述问题规模的非负整数，下列程序段的时间复杂度是（）。\nx=2;\nwhile(x<n/2)\nx=2*x;\nA. O(log2n)\nB. O(n)\nC. O(nlog2n)\nD. 0(n²)",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0111"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "A",
            "key_points": [
                "string"
            ],
            "explanation": "基本运算（执行频率最高的语句）为x=2*x，每执行一次，×乘以2，设执行次数为1，则\n有 21+1<n/2，所以 1<log2(n/2)- 1 =log2n-2，得 T(n)= O(log2n)。"
        }
    },
    {
        "id": "q012013",
        "title": "阶乘算法的时间复杂度",
        "content": "【2012统考真题】求整数n（n≥0）的阶乘的算法如下，其时间复杂度是（）。\nint fact（int n){\nif（n<=1) return 1;\nreturn n*fact(n-l);\nA. O(log2n)\nB.O(n)\nC. O(nlog2n)\nD. 0(n²)",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0111"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "B",
            "key_points": [
                "string"
            ],
            "explanation": "本题求的是递归调用的时间复杂度，递归调用可视为多重循环，每次递归执行的基本语句是\nif（n<=1）return 1;，因此可以认为单层循环的执行次数为1，共执行了n次递归调用，总\n10\n2026年数据结构考研复习指导\n执行次数T=1+1+…+1=n，所以时间复杂度为O(n)。\n循环变量i\n单层循环语句\n单层循环执行次数\nn\nif(n<=1) return 1;\n1\nn-1\nif(n<=l) return 1;\n1\nn-2\nif(n<=1)return 1;\n...\n...\n...\n1\nif(n<=l)return 1;\n1"
        }
    },
    {
        "id": "q012014",
        "title": "程序段时间复杂度分析",
        "content": "【2014统考真题】下列程序段的时间复杂度是（）。\ncount=0;\nfor（k=1;k<=n;k*=2)\nfor（j=1;j<=n;j++)",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0111"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "C",
            "key_points": [
                "string"
            ],
            "explanation": "对于单层循环如for（j=1;j<=n;j++）count++;，可以直接数出执行次数为n，因此可\n将多层循环转换成多个并列的单层循环，且列出每个单层循环如下（假设+为循环变量的幂次）：\n循环变量k\n单层循环语句\n单层循环执行次数\n1\nfor（j=1;j<=n;j++)\nn\n2\nfor(j=1;j<=n;j++)\nn\n22\nfor(j=1;j<=n;j++)\nn\n.….\n.·.\n...\n2\nfor（j=1;j<=n;j++)\nn\n进入外层循环的条件是k≤n,当循环结束时，循环变量的幂次t满足2'≤n<2\",即t≤log2n。\n所以总执行次数 T=n(t+1)=n(log2n+1)，时间复杂度为 O(nlog2n)。"
        }
    }
]