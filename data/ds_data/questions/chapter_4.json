[
    {
        "id": "q042001",
        "title": "串的模式匹配",
        "content": "设有两个串S和S2，求S2在S中首次出现的位置的运算称为（）。\nA.求子串\nB.判断是否相等\nC.模式匹配\nD.连接",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0421",
            "kc0422",
            "kc0423"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "C",
            "key_points": [
                "string"
            ],
            "explanation": "求子串操作是从串S中截取第i个字符起长度为/的子串，选项A错误。选项B、D明显错误。"
        },
        "chapter": "04"
    },
    {
        "id": "q042002",
        "title": "KMP算法主串指针特点",
        "content": "KMP算法的特点是在模式匹配时，指示主串的指针（）。\nA.不会变大\nB.不会变小\nC.都有可能\nD.无法判断",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0421",
            "kc0422",
            "kc0423"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "B",
            "key_points": [
                "string"
            ],
            "explanation": "在KMP算法的比较过程中，主串不会回溯，所以主串的指针不会变小。\n03.C、D\n尽管实际应用中，一般情况下简单的模式匹配算法的时间复杂度近似为O（m+n)，但它的理\n论时间复杂度还是O(mn)。KMP算法的时间复杂度为O(m+n)。"
        },
        "chapter": "04"
    },
    {
        "id": "q042003",
        "title": "模式匹配算法时间复杂度",
        "content": "设主串的长度为n，子串的长度为m，则简单的模式匹配算法的时间复杂度为（），KMP\n算法的时间复杂度为（）。\nA. 0(m)\nB. O(n)\nC. O(mn)\nD. O(m + n)",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0421",
            "kc0422",
            "kc0423"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "未找到",
            "key_points": [
                "string"
            ],
            "explanation": "未找到解析"
        },
        "chapter": "04"
    },
    {
        "id": "q042004",
        "title": "KMP算法中next数组的位移方式",
        "content": "在KMP算法中，用next数组存放模式串的部分匹配信息，当模式串位j与主串位i\n比较时，两个字符不相等，则j的位移方式是（）。\nA.j=0\nB.j=j+1\nC.j不变\nD.j=next[j]",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0421",
            "kc0422",
            "kc0423"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "D",
            "key_points": [
                "string"
            ],
            "explanation": "在KMP算法中，当主串的第i个字符和模式串的第j个字符不匹配时，主串的位指针i不\n变，将主串的第i个字符与模式串的第next[j]个字符比较，即j=next[j]。"
        },
        "chapter": "04"
    },
    {
        "id": "q042005",
        "title": "KMP算法中i的位移方式",
        "content": "在KMP算法中，用next数组存放模式串的部分匹配信息，当模式串位j与主串位i\n比较时，两个字符不相等，则i的位移方式是（）。\nA. i=next[i]\nB.i不变\nC.i=0\nD.i=i+1",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0421",
            "kc0422",
            "kc0423"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "B",
            "key_points": [
                "string"
            ],
            "explanation": "在KMP算法中，当主串的第i个字符和模式串的第j个字符失配时，主串指针i不回溯。"
        },
        "chapter": "04"
    },
    {
        "id": "q042006",
        "title": "串的next数组计算",
        "content": "串'ababaaababaa'的next数组为（\n)。\nA.0,1,2,3,4,5,6,7,8,9,9\nB.0,1,2,1,2,1,1,1,1,2,1,2\nC.0,1, 1,2,3,4,2,2,3,4,5,6\nD.0,1,2,3,0,1,2,3,2,2,3,4,5",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0421",
            "kc0422",
            "kc0423"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "C",
            "key_points": [
                "string"
            ],
            "explanation": "本题采用先求串S='ababaaababaa'的部分匹配值，再求next数组的方法。\n·'a'的前后缀都为空，最长相等前后缀长度为0。\n·'ab'的前缀（a}n后缀（b}=O，最长相等前后缀长度为0。\n·aba'的前缀{a，ab}n后缀{a，ba}={a}，最长相等前后缀长度为1。\n120\n2026年数据结构考研复习指导\n'abab'的前缀{a，ab，aba}n后缀{b，ab，bab}={ab}，最长相等前后缀长度为2。\n依次求出的部分匹配值见下表第3行，将其整体右移一位，低位用-1填充，见下表第4行。\n编号\n1\n3\n4\n5\n6\n7\n8\n9\na\nb\na\na\na\na\na\nb\na\na\n3\nPM\n0\n0\n1\n2\n1\n1\n2\n3\n4\n5\n6\nnext\n-1\n0\n3\n1\n2\n3\n4\n5\n选项中next[1]等于0，所以将next数组整体加1。"
        },
        "chapter": "04"
    },
    {
        "id": "q042007",
        "title": "串'ababaaababaa'的next数组",
        "content": "串'ababaaababaa的next数组为（）。\nA.-1,0,1,2,3,4,5,6,7,8,8,8\nB.-1,0,1,0,1,0,0,0,0,1,0,1\nC.-1,0,0,1,2,3,1,1,2,3,4,5\nD.-1,0,1,2,-1,0,1,2,1,1,2,3",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0421",
            "kc0422",
            "kc0423"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "C",
            "key_points": [
                "string"
            ],
            "explanation": "解析见上题。读者也可尝试用前面介绍的手算方法。\n注意，next数组是否整体加1都正确，需根据题意具体分析。"
        },
        "chapter": "04"
    },
    {
        "id": "q042008",
        "title": "KMP算法字符比较次数",
        "content": "设主串S='aabaaaba'，模式串T='aaab'，采用KMP算法进行模式匹配，到匹配成\n功时为止，在匹配过程中进行的单个字符间的比较次数是（）。\nA.10\nB.9\nC.8\nD. 7",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0421",
            "kc0422",
            "kc0423"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "B",
            "key_points": [
                "string"
            ],
            "explanation": "假设位序从1开始的，手工计算出T的next数组如下。\n编号\n1\n2\n3\n4\nS\na\na\na\nb\nnext\n0\n1\n2\n3\n采用KMP匹配算法时：第一趟，经过3次比较后，发现S[3]≠T[3]；第二趟，用S[3]和T[2]\n（next[3]=2）比较，不相等；第三趟，用s[3]和T[1]（next[2]=1）比较，不相等；第四趟，\nnext[1]=0，因此开始用S[4]和T[1]比较，经过4次比较后，匹配成功。整个匹配过程如下。\n第一趟\na\na\na\nb\n第二趟\nb\n第三趟\nb\n第四趟\n总比较次数为3+1+1+4=9。"
        },
        "chapter": "04"
    },
    {
        "id": "q042009",
        "title": "KMP算法字符比较次数",
        "content": "设主串S=+aabaaaba'，模式串T='aaab'，采用改进后的KMP算法进行模式匹配，\n到匹配成功时为止，在匹配过程中进行的单个字符间的比较次数是（）。\nA.9\nB.8\nC.7\nD.6",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0421",
            "kc0422",
            "kc0423"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "C",
            "key_points": [
                "string"
            ],
            "explanation": "假设位序从1开始的，计算出T的nextva1数组如下。\n编号\n2\n3\n4\nS\na\na\na\nb\nnextval\n0\n0\n3\n采用改进的KMP匹配算法时：第一趟，经过3次比较后，发现S[3]≠T[3]；第二趟，\nnextva1[3]=0，因此开始用s[4]和T[1]比较，经过4次比较后，匹配成功。整个匹配过程如下。\n第二趟\n总比较次数为3+4=7。"
        },
        "chapter": "04"
    },
    {
        "id": "q042010",
        "title": "KMP算法nextval数组滑动距离",
        "content": "KMP算法使用nextval数组进行模式匹配，模式串为S='ababaaa'，当主串中的某\n字符与S中的第6个字符失配时，S向右滑动的距离是（）。\nA. 1\nB.2\nC.3\nD. 4",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0421",
            "kc0422",
            "kc0423"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "B",
            "key_points": [
                "string"
            ],
            "explanation": "假设位序从0开始的，计算出nextva1数组。当比较到s[j]失配时，模式串向右滑动的距\n第4章串\n121\n编号j\ns[j]\nnext[j]\n0\nnextval[j]\nj-nextval[j]\n1\n3\n3\n5\n5\n此外，若对KMP算法很熟悉，则此类题也可直接动手模拟，而不需要求nextva1数组，与\n第6个字符匹配失败，说明前面的ababa匹配成功，S可向右滑动2位继续尝试匹配。\n匹配失败，说明此元素不是a\nL\n主串：ababa\n第一趟匹配模式串：ababaaa\n此元素继续与元素b比较\n主串：ababa\n第二趟匹配模式串：\nababaaa"
        },
        "chapter": "04"
    },
    {
        "id": "q042011",
        "title": "字符串模式匹配问题",
        "content": "【2015统考真题】已知字符串s为'abaabaabacacaabaabcc'，模式串t为'abaabc'。",
        "difficulty": "integer",
        "type": "concept",
        "knowledge_points": [
            "kc0421",
            "kc0422",
            "kc0423"
        ],
        "related_questions": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "reference_answer": {
            "content": "C",
            "key_points": [
                "string"
            ],
            "explanation": "由题中“失配s[i]≠t[j]时，i=j=5”，可知题中的主串和模式串的位序都是从0开始的\n（要注意灵活应变）。按照next数组生成算法，对于t有\n编号012345\n七\na\nnext-10o1\n1\n2\n发生失配时，主串指针i不变，子串指针j回退到next[j]位置重新比较，当s[i]≠t[j]\n时，i=j=5，由next表得知next[j]=next[5]=2（位序从0开始）。因此，i=5，j=2。"
        },
        "chapter": "04"
    }
]