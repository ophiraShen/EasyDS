[
    {
        "id": "kc0111",
        "title": "基本概念和术语",
        "chapter_id": "c01",
        "description": "1.数据\n数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程\n序识别和处理的符号的集合。数据是计算机程序加工的原料。\n2.数据元素\n据项组成，数据项是构成数据元素的不可分割的最小单位。例如，学生记录就是一个数据元素，\n它由学号、姓名、性别等数据项组成。\n\n2026年数据结构考研复习指导\n3.数据对象\n数据对象是具有相同性质的数据元素的集合，是数据的一个子集。例如，整数数据对象是集\n合N={0,±1,±2,.·}。\n4.数据类型\n数据类型是一个值的集合和定义在此集合上的一组操作的总称。\n1）原子类型。其值不可再分的数据类型。\n2）结构类型。其值可以再分解为若干成分（分量）的数据类型。\n3）抽象数据类型（ADT）。一个数学模型及定义在该数学模型上的一组操作。它通常是对数\n据的某种抽象，定义了数据的取值范围及其结构形式，以及对数据操作的集合。\n5.数据结构\n数据结构是相互之间存在一种或多种特定关系的数据元素的集合。在任何问题中，数据元素\n都不是孤立存在的，它们之间存在某种关系，这种数据元素相互之间的关系称为结构（Structure）。\n数据结构包括三方面的内容：逻辑结构、存储结构和数据的运算。\n数据的逻辑结构和存储结构是密不可分的两个方面，一个算法的设计取决于所选定的逻辑结\n构，而算法的实现依赖于所采用的存储结构?。",
        "related_points": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "questions": [
            "q011002",
            "q011003",
            "q011004",
            "q011005",
            "q012001"
        ]
    },
    {
        "id": "kc0112",
        "title": "数据结构三要素",
        "chapter_id": "c01",
        "description": "1.数据的逻辑结构\n逻辑结构是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。它与数据的存储无关，\n是独立于计算机的。数据的逻辑结构分为线性结构和非线性结构，线性表是典型的线性结构：集\n合、树和图是典型的非线性结构。数据的逻辑结构分类如图1.1所示。\n数据的逻辑结构\n线性结构\n非线性结构\n受限线性表\n线性表推广\n集合\n树形结构\n图状结构\n般线性表\n栈和队列\n数组\n般树\n义树\n有向图\n无向图\n图1.1数据的逻辑结构分类\n1）集合。结构中的数据元素之间除“同属一个集合”外，别无其他关系，如图1.2（a)所示。\nolololololo\noo\n(a)集合\n(b)线性结构\n(d)网状结构\n(c)树形结构\n图1.2四类基本结构关系示例图\n2）线性结构。结构中的数据元素之间只存在一对一的关系，如图1.2（b)所示。\n3）树形结构。结构中的数据元素之间存在一对多的关系，如图1.2（c)所示。\n①读者应通过后续章节的学习，逐步理解设计与实现的概念与区别。\n\n第1章绪\n论\n3\n4）图状结构或网状结构。结构中的数据元素之间存在多对多的关系，如图1.2（d)所示。\n2.数据的存储结构\n存储结构是指数据结构在计算机中的表示（也称映像），也称物理结构。它包括数据元素的\n表示和关系的表示。数据的存储结构是用计算机语言实现的逻辑结构，它依赖于计算机语言。数\n据的存储结构主要有顺序存储、链式存储、索引存储和散列存储。\n1）顺序存储。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关\n系由存储单元的邻接关系来体现。其优点是可以实现随机存取，每个元素占用最少的存\n储空间；缺点是只能使用相邻的一整块存储单元，因此可能产生较多的外部碎片。\n2）链式存储。不要求逻辑上相邻的元素在物理位置上也相邻，借助指示元素存储地址的指\n针来表示元素之间的逻辑关系。其优点是不会出现碎片现象，能充分利用所有存储单元：\n缺点是每个元素因存储指针而占用额外的存储空间，且只能实现顺序存取。\n3）索引存储。在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为索引项，\n索引项的一般形式是（关键字，地址）。其优点是检索速度快：缺点是附加的索引表额外\n占用存储空间。另外，增加和删除数据时也要修改索引表，因而会花费较多的时间。\n4）散列存储。根据元素的关键字直接计算出该元素的存储地址，也称哈希（Hash）存储。\n其优点是检索、增加和删除结点的操作都很快；缺点是若散列函数不好，则可能出现元\n素存储单元的冲突，而解决冲突会增加时间和空间开销。\n3.数据的运算\n施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，指出运算的功\n能；运算的实现是针对存储结构的，指出运算的具体操作步骤。",
        "related_points": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "questions": [
            "q011002",
            "q011003",
            "q011004",
            "q011005",
            "q012001"
        ]
    },
    {
        "id": "kc0121",
        "title": "算法的基本概念",
        "chapter_id": "c01",
        "description": "算法（Algorithm）是对特定问题求解步骤的一种描述，它是指令的有限序列，其中的每条指\n令表示一个或多个操作。此外，一个算法还具有下列五个重要特性：\n1）有穷性。一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。\n2）确定性。算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出。\n3）可行性。算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。\n4）输入。一个算法有零个或多个输入，这些输入取自于某个特定的对象的集合。\n\n第1章绪\n论\n5\n5）输出。一个算法有一个或多个输出，这些输出是与输入有着某种特定关系的量。\n通常，设计一个“好”的算法应考虑达到以下目标：\n1）正确性。算法应能够正确地解决求解问题。\n2）可读性。算法应具有良好的可读性，以帮助人们理解。\n3）健壮性。算法能对输入的非法数据做出反应或处理，而不会产生莫名其妙的输出。\n4）高效率与低存储量需求。效率是指算法执行的时间，存储量需求是指算法执行过程中所\n需要的最大存储空间，这两者都与问题的规模有关。",
        "related_points": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "questions": [
            "q012002",
            "q012004",
            "q012005",
            "q012006",
            "q012007",
            "q012009",
            "q012012",
            "q012013",
            "q012014"
        ]
    },
    {
        "id": "kc0122",
        "title": "算法效率的度量",
        "chapter_id": "c01",
        "description": "命题追踪）（算法题）分析时空复杂度（2010—2013、2015、2016、2018—2021）\n算法效率的度量是通过时间复杂度和空间复杂度来描述的。\n1．时间复杂度\n命题追踪分析算法的时间复杂度（2011—2014、2017、2019、2022）\n一个语句的频度是指该语句在算法中被重复执行的次数。算法中所有语句的频度之和记为\nT(n)，它是该算法问题规模n的函数，时间复杂度主要分析T(n)的数量级。算法中基本运算（最\n深层循环中的语句）的频度与T(n)同数量级，因此通常将算法中基本运算的执行次数的数量级作\n为该算法的时间复杂度?。于是，算法的时间复杂度记为\nT(n)= O(f(n))\n式中，O的含义是T(n)的数量级，其严格的数学定义是：若T(n)和fn)是定义在正整数集合上的\n两个函数，则存在正常数 C和no，使得当n≥no时，都满足0≤ T(n)≤Cf(n)。\n算法的时间复杂度不仅依赖于问题的规模n，也取决于待输入数据的性质（如输入数据元素\n的初始状态）。例如，在数组A[0...n-1]中，查找给定值k的算法大致如下：\n(1)i=n-1;\n(2）while（i>=0&&(A[i]!=k))\n(3)\ni--;\n(4)returni;\n该算法中语句3（基本运算）的频度不仅与问题规模n有关，而且与下列因素有关：\n①若A中没有与k相等的元素，则语句3的频度f(n)=n。\n②若A的最后一个元素等于k，则语句3的频度f（n)是常数0。\n最坏时间复杂度是指在最坏情况下，算法的时间复杂度。\n平均时间复杂度是指所有可能输入实例在等概率出现的情况下，算法的期望运行时间。\n最好时间复杂度是指在最好情况下，算法的时间复杂度。\n一般总是考虑在最坏情况下的时间复杂度，以保证算法的运行时间不会比它更长。\n在分析一个程序的时间复杂性时，有以下两条规则：\n1) 加法规则: T(n)= T(n) + T2(n)= O(f(n)) + O(g(n)= O(max(f(n), g(n))\n2） 乘法规则： T(n)= T(n)xT2(n)= O(f(n))xO(g(n))=O(f(n)xg(n))\n例如，设a{}、b{)、c{}三个语句块的时间复杂度分别为O(1)、O(n)、O(n²)，则\n①al\n(q\nc()\n//时间复杂度为O(²)，满足加法规则\n①取f（n）中随n增长最快的项，将其系数置为1作为时问复杂度的度量。例如，f（n）=an²+bn²+cn的时问复杂度为O（n²)。\n\n2026年数据结构考研复习指导\n6\n②\na\nb(\nc()\n/时间复杂度为0（n²)，满足乘法规则\n常见的渐近时间复杂度为\n0(1) <0(log2n)<0(n)<0(nlog2n) < 0(n²)<0(n²) <0(2\") <0(n!) <0(n\")\n2.空间复杂度\n算法的空间复杂度S(n)定义为该算法所需的存储空间，它是问题规模n的函数，记为\nS(n) = 0(g(n))\n一个程序在执行时除需要存储空间来存放本身所用的指令、常数、变量和输入数据外，还需\n要一些对数据进行操作的工作单元和存储一些为实现计算所需信息的辅助空间。若输入数据所占\n空间只取决于问题本身，和算法无关，则只需分析除输入和程序之外的额外空间。例如，若算法\n中新建了几个与输入数据规模n相同的辅助数组，则空间复杂度为O(n)。\n算法原地工作是指算法所需的辅助空间为常量，即O(1)。",
        "related_points": [
            {
                "id": "string",
                "relation_type": "string"
            }
        ],
        "questions": [
            "q012002",
            "q012004",
            "q012005",
            "q012006",
            "q012007",
            "q012009",
            "q012012",
            "q012013",
            "q012014"
        ]
    }
]