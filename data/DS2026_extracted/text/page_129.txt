第4章串
117
else
j=next[j]；//否则令j=next[j]，循环继续
计算机执行起来效率很高，但需要手工计算时，仍然采用前面的方法。
与next数组的求解相比，KMP的匹配算法相对要简单很多，它在形式上与简单的模式匹配
算法很相似。不同之处仅在于当匹配过程产生失配时，指针i不变，指针j退回到next[j］的
位置并重新进行比较，且当指针j为0时，指针i和j同时加1。也就是说，若主串的第i个位
int Index_KMP(SString S,SString T,int next[]){
inti=1,j=1;
while(i<=s.length&&j<=T.length)(
if（j==0l|S.ch[i]==T.ch[j]）{
++i;++j;
//继续比较后继字符
else
j=next[j];
//模式串向右滑动
if(j>T.length)
return i-T.length;
//匹配成功
else
return 0;
况下，普通模式匹配的实际执行时间复杂度近似为O（m+n)，因此至今仍被采用。KMP算法仅在
主串与子串有很多“部分匹配”时才显得比普通算法快，其主要优点是主串不回溯。
4.2.3KMP算法的进一步优化
前面定义的next数组在某些情况下尚有缺陷，还可以进一步优化。如图4.5所示，模式中
主串
模式串
j
next[j]
nextval[j]
0
图4.5KMP算法进一步优化示例
当i=4、j=4 时，s4跟p4（b≠a）失配，若用之前的 next 数组，则还需要进行 s4与p3、S4
与 p2、S4与 p1这 3次比较。事实上，因为 Pnext[4]=3=P4=a、Pnext[3]=2=P3=a、Pnext[2]=1=P2=a,
显然后面3次用一个和p4相同的字符跟s4比较毫无意义，必然失配。那么问题出在哪里呢？
问题在于不应该出现 pj=Pnext[ij]。理由是：当 p;≠s时，下次匹配必然是 Pnext[j]跟 s比较，
若 p=Pnext[j]，则相当于拿一个和pg 相等的字符跟 s比较，这必然导致继续失配，这样的比较毫
无意义。若出现p=Pnext[j]，则如何处理呢？
等为止，更新后的数组命名为nextval。计算next数组修正值的算法如下，此时匹配算法不变。
void get_nextval(sstring T,int nextval[]){
