第7章查找
287
在等概率情况下，图7.8(a)查找成功的平均查找长度为
ASLa=(1 + 2×2+ 3x4 + 4×3)/10 = 2.9
而图7.8(b)查找成功的平均查找长度为
ASL,=(1+2+3+4+5+6+7+8+9+10)10=5.5
从查找过程看，二叉排序树与二分查找相似。就平均时间性能而言，二叉排序树上的查找和
二分查找差不多。但二分查找的判定树唯一，而二叉排序树的查找不唯一，相同的关键字其插入
顺序不同可能生成不同的二叉排序树，如图7.8所示。
就维护表的有序性而言，二叉排序树无须移动结点，只需修改指针即可完成插入和删除操作，
平均执行时间为O(log2)。二分查找的对象是有序顺序表，若有插入和删除结点的操作，所花的
代价是O（n)。当有序表是静态查找表时，宜用顺序表作为其存储结构，而采用二分查找实现其查
找操作；若有序表是动态查找表，则应选择二叉排序树作为其逻辑结构。
7.3.2平衡二叉树
1.平衡二叉树的定义
为了避免树的高度增长过快，降低二叉排序树的性能，规定在插入和删除结点时，要保
证任意结点的左、右子树高度差的绝对值不超过1，将这样的二叉树称为平衡二叉树（Balanced
BinaryTree），也称AVL树。定义结点左子树与右子树的高度差为该结点的平衡因子，则平衡
二叉树结点的平衡因子的值只可能是-1、0或1。
命题追踪平衡二叉树的定义（2009）
因此，平衡二叉树可定义为或是一棵空树，或是具有下列性质的二叉树：它的左子树和右子
图7.9（b）所示是不平衡的二叉树。结点中的数字为该结点的平衡因子。
(a)平衡二义树
(b)不平衡的二义树
图7.9平衡二叉树和不平衡的二叉树
2.平衡二叉树的插入
二叉排序树保证平衡的基本思想如下：每当在二叉排序树中插入（或删除）一个结点时，首
先检查其插入路径上的结点是否因为此次操作而导致了不平衡。若导致了不平衡，则先找到插入
路径上离插入结点最近的平衡因子的绝对值大于1的结点A，再对以A为根的子树，在保持二叉
排序树特性的前提下，调整各结点的位置关系，使之重新达到平衡。
命题追踪平衡二叉树中插入操作的特点（2015）
注意，每次调整的对象都是最小不平衡子树，即以插入路径上离插入结点最近的平衡因子的
绝对值大于1的结点作为根的子树。图7.10中的虚线框内为最小不平衡子树。
