92
2026年数据结构考研复习指导
则将其压入栈中；若该项是操作符<op>，则从栈中退出两个操作数Y和x,形成运算指令X<op>Y，
并将计算结果压入栈中。当所有项都扫描并处理完后，栈顶存放的就是最后的计算结果。
例如，后缀表达式ABCD-*+EF/-求值的过程需要12步，见表3.2。
表3.2后缀表达式ABCD-*+EF/-求值的过程
步
扫描项
项类型
栈中内容
置空栈
空
2
A
操作数
入栈
A
3
B
操作数
入栈
AB
C
操作数
入栈
ABC
5
D
操作数
入栈
ABCD
6
一
操作符
D、C出栈，计算C-D，结果R入栈
ABR
7
*
操作符
R、B出栈，计算BxR，结果R入栈
AR2
8
操作符
R2、A出栈，计算A+R2，结果R入栈
R3
9
E
操作数
入栈
RE
10
F
操作数
入栈
REF
11
操作符
E、E出栈，计算E/F，结果R4入栈
R3R4
12
操作符
R4、R出栈，计算R-R4，结果Rs入栈
R5
3.3.3
栈在递归中的应用
递归是一种重要的程序设计方法。简单地说，若在一个函数、过程或数据结构的定义中又应
用了它自身，则这个函数、过程或数据结构称为是递归定义的，简称递归。
递归通常把一个大型的复杂问题层层转化为一个与原问题相似的规模较小的问题来求解，递
归策略只需少量的代码就可以描述出解题过程所需要的多次重复计算，大大减少了程序的代码
量。但在通常情况下，它的效率并不是太高。
以斐波那契数列为例，其定义为
[F(n-1)+F(n-2),n>1
F(n)={1,
n=1
[o,
n=0
这就是递归的一个典型例子，用程序实现时如下：
int F(int n)(
//斐波那契数列的实现
if (n==0)
return0;
//边界条件
else if（n==1)
return1;
/边界条件
else
return F(n-1)+F(n-2);
//递归表达式
必须注意递归模型不能是循环定义的，其必须满足下面的两个条件：
·递归表达式（递归体）。
·边界条件（递归出口）。
递归的精髓在于能否将原始问题转换为属性相同但规模较小的问题。
命题追踪栈在函数调用中的作用和工作原理（2015、2017）
在递归调用的过程中，系统为每一层的返回点、局部变量、传入实参等开辟了递归工作栈来
进行数据存储，递归次数过多容易造成栈溢出等。而其效率不高的原因是递归调用过程中包含很
