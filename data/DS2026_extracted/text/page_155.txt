第5章树与二叉树
143
列非空，则队头结点出队，访问该结点，若它有左孩子，则将其左孩子入队；若它有右孩子，则
将其右孩子入队。③重复步骤②，直至队列为空。
二叉树的层次遍历算法如下：
void LevelOrder(BiTree T){
InitQueue(Q);
//初始化辅助队列
BiTree p;
EnQueue(Q,T);
/将根结点入队
while(!IsEmpty(Q))(
/队列不空则循环
DeQueue(Q,p);
/队头结点出队
visit(p);
/访问出队结点
if(p->lchild!=NULL)
EnQueue(Q,p->lchild);
//若左孩子不空，则左孩子入队
if(p->rchild!=NULL)
EnQueue(Q,p->rchild);
//若右孩子不空，则右孩子入队
在复习过程中，读者应将上述二叉树层次遍历的算法作为一个模板，熟练掌握其执行过程，
并达到熟练手写的程度。
注意
遍历是二叉树各种操作的基础，例如对于一棵给定二叉树求结点的双亲、求结点的孩子、求二叉树
的深度、求叶结点个数、判断两棵二叉树是否相同等。所有这些操作都是在遍历的过程中进行的，因此
必须掌握二叉树的各种遍历过程，并能灵活运用以解决各种问题。
5.由遍历序列构造二叉树
命题追踪
先序序列对应的不同二叉树的分析（2015）
对于一棵给定的二叉树，其先序序列、中序序列、后序序列和层序序列都是确定的。然而，
只给出四种遍历序列中的任意一种，却不能唯一地确定一棵二叉树。若已知中序序列，再给出其
他三种遍历序列中的任意一种，就可以唯一地确定一棵二叉树。
（1）由先序序列和中序序列构造二叉树
命题追踪先序序列和中序序列相同时确定的二叉树（2017）
命题追踪由先序序列和中序序列构造一棵二叉树（2020、2021）
在先序序列中，第一个结点一定是二叉树的根结点；而在中序遍历中，根结点必然将中序序
列分割成两个子序列，前一个子序列是根的左子树的中序序列，后一个子序列是根的右子树的中
序序列。左子树的中序序列和先序序列的长度是相等的，右子树的中序序列和先序序列的长度是
相等的。根据这两个子序列，可以在先序序列中找到左子树的先序序列和右子树的先序序列，如
图5.11所示。如此递归地分解下去，便能唯一地确定这棵二叉树。
先序序列
根
（左子树的先序序列
【右子树的先序序列
左子树
右子树
中序序列
【左子树的中序序列
根
【右子树的中序序列
图5.11由先序序列和中序序列构造二叉树
