第5章树与二叉树
185
命题追踪根据哈夫曼编码对编码序列进行译码（2017）
若没有一个编码是另一个编码的前缀，则称这样的编码为前缀编码。举例：设计字符A，B
和C对应的编码0，10和110是前缀编码。对前缀编码的解码很简单，因为没有一个编码是其他
编码的前缀。所以识别出第一个编码，将它翻译为原字符，再对剩余的码中执行同样的解码操作。
例如，码串0010110可被唯一地翻译为A，A，B和C。另举反例：若再将字符D的编码设计为11，
此时11是110的前缀，则上述码串的后三位就无法唯一翻译。
命题追踪哈夫曼树的构造及相关的分析（2012、2018、2021、2023）
命题追踪前缀编码的分析及应用（2014、2020）
可以利用二叉树来设计二进制前缀编码。假设为A，B，C，D四个字符设计前缀编码，可以用
图5.26所示的二叉树来表示，4个叶结点分别表示4个字符，且约定左分支表示0，右分支表示
1，从根到叶结点的路径上用分支标记组成的序列作为该叶结点字符的编码，可以证明如此得到
的必为前缀编码。由图5.26得到字符A，B,C，D的前缀编码分别为0,10,110，111。
编码A(0)
B(10)
C(110)
D(I11)
图5.26前缀编码示例
命题追踪哈夫曼编码和定长编码的差异（2022）
哈夫曼编码是一种非常有效的数据压缩编码。由哈夫曼树得到哈夫曼编码是很自然的过程。
首先，将每个字符当作一个独立的结点，其权值为它出现的频度（或次数），构造出对应的哈夫
曼树。然后，将从根到叶结点的路径上分支标记的字符串作为该字符的编码。图5.27所示为一个
由哈夫曼树构造哈夫曼编码的示例，矩形方块表示字符及其出现的次数。
各字符编码为
a:0
b:101
c:100
d:111
e:1101
f:1100
图5.27由哈夫曼树构造哈夫曼编码
这棵哈夫曼树的WPL为
WPL=1×45+3×（13+12+16)+4×(5+9）=224
此处的WPL可视为最终编码得到二进制编码的长度，共224位。若采用3位固定长度编码，则
得到的二进制编码长度为300位，因此哈夫曼编码共压缩了25%的数据。利用哈夫曼树可以设计
出总长度最短的二进制前缀编码。
