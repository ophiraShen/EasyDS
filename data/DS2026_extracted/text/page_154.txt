142
2026年数据结构考研复习指导
visit(T);
/访问根结点
InOrder(T->rchild);
/递归遍历右子树
3.后序遍历（PostOrder）
若二叉树为空，则什么也不做：否则，
1）后序遍历左子树；
2）后序遍历右子树；
3）访问根结点。
图5.9中的虚线表示对该二叉树进行后序遍历的路径，得到后序遍历序列为642531。
结束
开始
图5.9二叉树的后序遍历
对应的递归算法如下：
void PostOrder(BiTree T){
if（T!=NULL){
PostOrder(T->lchild);
/递归遍历左子树
PostOrder(T->rchild);
/递归遍历右子树
visit(T);
/访问根结点
上述三种遍历算法中，递归遍历左、右子树的顺序都是固定的，只是访问根结点的顺序不同。
不管采用哪种遍历算法，每个结点都访问一次且仅访问一次，所以时间复杂度都是O(n)。在递归
遍历中，递归工作栈的栈深恰好为树的深度，所以在最坏情况下，二叉树是有n个结点且深度为
n的单支树，遍历算法的空间复杂度为O（n)。
4.层次遍历
图5.10所示为二叉树的层次遍历，即按照箭头所指方向，按照1,2，3，4的层次顺序，自上而
下、从左至右对二叉树中的各个结点进行逐层访问。
图5.10二叉树的层次遍历
进行层次遍历时，需要借助一个队列。层次遍历的思想如下：①首先将根结点入队。②若队
