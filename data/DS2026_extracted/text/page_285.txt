第7章查
找
273
7101316
192
2932
33
37
4143
low↑ thigh
↑mid
第四次查找，此时子表只含有一个元素，且10≠11，所以表中不存在待查元素。
命题追踪分析给定二叉树树形能否构成折半查找判定树（2017）
折半查找的过程可用图7.2所示的二叉树来描述，称为判定树。树中每个圆形结点表示一个
记录，结点中的值为该记录的关键字值；树中最下面的叶结点都是方形的，它表示查找失败的区
间。从判定树可以看出，查找成功时的查找长度为从根结点到目的结点的路径上的结点数，而查
找失败时的查找长度为从根结点到对应失败结点的父结点的路径上的结点数：每个结点值均大于
其左子结点值，且均小于其右子结点值。若有序序列有n个元素，则对应的判定树有n个圆形的
非叶结点和n+1个方形的叶结点。显然，判定树是一棵平衡二叉树（见7.3.2节）。
(13,16)
(37,41)
(7.10)
（10,13)
(16,19)
(19.29)
(33.37)
图7.2描述折半查找过程的判定树
命题追踪折半查找的最多比较次数的分析（2010、2023）
由上述分析可知，用折半查找法查找到给定值的比较次数最多不会超过树的高度。在等概率
查找时，查找成功的平均查找长度为
n+1
ASL=
(1x1+2×2+..+h×2-l)=
-log(n+1)-1≈log2(n+1)-1
=1
n
式中，h是树的高度，并且元素个数为n时树高h=[log2（n+1）l。所以，折半查找的时间复杂度
为O(log2n)，平均情况下比顺序查找的效率高。
在图7.2所示的判定树中，在等概率情况下，查找成功（圆形结点）的ASL=（1×1+2×2+3×4+
4×4)/11=3，查找失败（方形结点）的ASL=（3×4+4×8)/12=11/3。
命题追踪折半查找的适用场景（2024）
因为折半查找需要方便地定位查找区域，所以它要求线性表必须具有随机存取的特性。因此，
该查找法仅适合于顺序存储结构，不适合于链式存储结构，且要求元素按关键字有序排列。
7.2.3分块查找
分块查找也称索引顺序查找，它吸取了顺序查找和折半查找各自的优点，既有动态结构，又
适于快速查找。
分块查找的基本思想：将查找表分为若干子块。块内的元素可以无序，但块间的元素是有序
的，即第一个块中的最大关键字小于第二个块中的所有记录的关键字，第二个块中的最大关键字
小于第三个块中的所有记录的关键字，以此类推。再建立一个索引表，索引表中的每个元素含有
