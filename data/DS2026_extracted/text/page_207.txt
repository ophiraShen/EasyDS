第5章树与二叉树
195
根据图中的哈夫曼树，6个序列的合并过程如下：
①在表集合{10,35,40,50,60,200}中，选择表A与表B合并，生成含45个元素的表AB。
②在表集合{40,45,50,60,200}中，将表AB与表C合并，生成含85个元素的表ABC。
③在表集合{50,60,85,200}中，表D与表E合并，生成含110个元素的表DE。
④在表集合{85，110,200}中，表ABC与表DE合并，生成含195个元素的表ABCDE。
当前表集合为{195,200}，表ABCDE与表F合并，生成含395个元素的表ABCDEF。
因为合并两个长度分别为m和n的有序表，最坏情况下需要比较m+n-1次，所以最坏
情况下比较的总次数计算如下：
第1次合并：最多比较次数=10+35-1=44。
第2次合并：最多比较次数=40+45-1=84。
第3次合并：最多比较次数=50+60-1=109。
第4次合并：最多比较次数=85+110-1=194。
第5次合并：最多比较次数=195+200-1=394。
比较的总次数最多为44+84+109+194+394=825。
2）各表的合并策略是：对多个有序表进行两两合并时，若表长不同，则最坏情况下总的比
较次数依赖于表的合并次序。可以借助于哈夫曼树的构造思想，依次选择最短的两个表
进行合并，此时可以获得最坏情况下的最佳合并效率。
03.【解答】
1）使用一棵二叉树保存字符集中各字符的编码，每个编码对应于从根开始到达某叶结点的
一条路径，路径长度等于编码位数，路径到达的叶结点中保存该编码对应的字符。
2）从左至右依次扫描0/1串中的各位。从根开始，根据串中当前位沿当前结点的左子指针或
右子指针下移，直到移动到叶结点时为止。输出叶结点中保存的字符。然后从根开始重
复这个过程，直到扫描到0/1串结束，译码完成。
3）二叉树既可用于保存各字符的编码，又可用于检测编码是否具有前缀特性。判定编码是
否具有前缀特性的过程，也是构建二叉树的过程。初始时，二叉树中仅含有根结点，其
左子指针和右子指针均为空。
依次读入每个编码C，建立/寻找从根开始对应于该编码的一条路径，过程如下：
对每个编码，从左至右扫描C的各位，根据C的当前位（0或1）沿结点的指针（左子指针
或右子指针）向下移动。当遇到空指针时，创建新结点，让空指针指向该新结点并继续移动。沿
指针移动的过程中，可能遇到三种情况：
①若遇到了叶结点（非根），则表明不具有前缀特性，返回。
②若在处理C的所有位的过程中，均没有创建新结点，则表明不具有前缀特性，返回。
