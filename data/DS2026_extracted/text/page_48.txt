36
2026年数据结构考研复习指导
2.双链表的删除操作
删除双链表中结点*p的后继结点*q，其指针的变化过程如图2.11所示。
②
图2.11双链表删除结点过程
命题追踪双链表中删除操作的实现（2016）
删除操作的代码片段如下：
p->next=q->next;
//图2.11中步骤①
d=rotd<-xu<-b
//图2.11中步骤②
free(q);
//释放结点空间
若问题改成要求删除结点*g的前驱结点*p，请读者思考具体的操作步骤。
在建立双链表的操作中，也可采用如同单链表的头插法和尾插法，但在操作上需要注意指针
的变化和单链表有所不同。
2.3.4循环链表
1.循环单链表
循环单链表和单链表的区别在于，表中最后一个结点的指针不是NULL，而改为指向头结点，
从而整个链表形成一个环，如图2.12所示。
在循环单链表中，表尾结点*r的next域指向L，故表中没有指针域为NULL的结点，因此，
循环单链表的判空条件不是头结点的指针是否为空，而是它是否等于头指针L。
图2.12循环单链表
命题追踪循环单链表中删除首元素的操作（2021）
循环单链表的插入、删除算法与单链表的几乎一样，所不同的是，若操作是在表尾进行，则
执行的操作不同，以让单链表继续保持循环的性质。当然，正是因为循环单链表是一个“环”，
所以在任何位置上的插入和删除操作都是等价的，而无须判断是否是表尾。
在单链表中只能从表头结点开始往后顺序遍历整个链表，而循环单链表可以从表中的任意
个结点开始遍历整个链表。有时对循环单链表不设头指针而仅设尾指针，以使得操作效率更高。
其原因是，若设的是头指针，对在表尾插入元素需要O(n)的时间复杂度，而若设的是尾指针r，
r->next即头指针，对在表头或表尾插入元素都只需要O(1)的时间复杂度。
2.循环双链表
由循环单链表的定义不难推出循环双链表。不同的是，在循环双链表中，头结点的prior
指针还要指向表尾结点，如图2.13所示。当某结点*p为尾结点时，p->next==L；当循环双链
表为空表时，其头结点的prior域和next域都等于L。
