第1章绪
论
11
免费网课+无水印PDF
二、综合应用题
01.【解答】
①基本语句k=k+10＊i 共执行了 n-2 次，所以 T(n)=O(n)。
③内循环执行m次，外循环执行n次，根据乘法原理，共执行了mxn次，故T（m,n）=O（mxn）。
归纳总结
本章的重点是分析程序的时间复杂度。一定要掌握分析时间复杂度的方法和步骤，很多读者
在做题时一眼就能看出程序的时间复杂度，但就是无法规范地表述其推导过程。为此，编者查阅
众多资料，总结出了此类题型的两种形式，供大家参考。
1.循环主体中的变量参与循环条件的判断
在用于递推实现的算法中，首先找出基本运算的执行次数x与问题规模n之间的关系式，解
得x=f(n)，f(n)的最高次幂为k，则算法的时间复杂度为O(n)。例如，
1.int i=1;
2.int y=5;
while(i<=n)
while((y+l)*(y+l)<n)
i=i*2;.
y=y+1;.
在例1 中，设基本运算i=i*2 的执行次数为t，则2'≤n，解得t≤log2n，故 T(n)=O(log2n)。
在例2中，设基本运算y=y+1的执行次数为t，则t=y-5，且(t+5+1)(t+5+1)<n，解得
t<√n-6，即 T(n)=O(√n)。
2.循环主体中的变量与循环条件无关
此类题可采用数学归纳法或直接累计循环次数。多层循环时从内到外分析，忽略单步语句、
条件判断语句，只关注主体语句的执行次数。此类问题又可分为递归程序和非递归程序：
·递归程序一般使用公式进行递推。时间复杂度的分析如下：
（1）)1+I-u=···=（Z-u)I+I+I=（I-u)1+I=（u）
即 T(n)= O(n)。
·非递归程序的分析比较简单，可以直接累计次数。本节前面给出了相关的习题，
思维拓展
求解斐波那契数列
公众号：小兔网盘
免费网课+无水印PDF
0
n=0
F(n)=
n=1
[F(n-1)+F(n-2),n>1
有两种常用的算法：递归算法和非递归算法。试分别分析两种算法的时间复杂度。
提示
请结合归纳总结中的两种方法进行解答。
