208
2026年数据结构考研复习指导
命题追踪
图的邻接表存储的应用（2014）
无向图和有向图的邻接表的实例分别如图6.7和图6.8所示。
3
4/
(a）无向图G
(b)无向图G的邻接表的表示
图6.7无向图邻接表表示法实例
41/
(a)有向图G
(b)有向图G的邻接表的表示
图6.8有向图邻接表表示法实例
图的邻接表存储结构定义如下：
#define MaxVertexNum 100
//图中顶点数目的最大值
typedef struct ArcNode
//边表结点
int adjvex;
//该弧所指向的顶点的位置
struct ArcNode *nextarc;
/指向下一条弧的指针
I/InfoType info;
//网的边权值
)ArcNode;
typedef struct VNode
//顶点表结点
VertexType data;
//顶点信息
ArcNode *firstarc;
//指向第一条依附该顶点的弧的指针
)VNode,AdjList[MaxVertexNum];
typedef struct{
AdjList vertices;
//邻接表
int vexnum,arcnum;
//图的顶点数和弧数
)ALGraph;
I/ALGraph是以邻接表存储的图类型
图的邻接表存储方法具有以下特点：
①若G为无向图，则所需的存储空间为O(IV+2|E)：若G为有向图，则所需的存储空间为
O(IV+|E)。前者的倍数2是因为在无向图中，每条边在邻接表中出现了两次。
命题追踪邻接矩阵法和邻接表法的适用性差异（2011）
②对于稀疏图（边数较少的图），采用邻接表表示将极大地节省存储空间。
③在邻接表中，给定一个顶点，能很容易地找出它的所有邻边，因为只需要读取它的邻接
表。在邻接矩阵中，相同的操作则需要扫描一行，花费的时间为O(n)。但是，若要确定
给定的两个顶点间是否存在边，则在邻接矩阵中可以立刻查到，而在邻接表中则需要在
相应结点对应的边表中查找另一结点，效率较低。
