第2章线性
表
37
图2.13循环双链表
2.3.5静态链表
静态链表是用数组来描述线性表的链式存储结构，结点也有数据域data和指针域next，
与前面所讲的链表中的指针不同的是，这里的指针是结点在数组中的相对地址（数组下标），也
称游标。和顺序表一样，静态链表也要预先分配一块连续的内存空间。
静态链表和单链表的对应关系如图2.14所示。
2
6
a
d
(a）静态链表示例
(b)静态链表对应的单链表
图2.14静态链表存储示意图
静态链表结构类型的描述如下：
#define MaxSize 50
//静态链表的最大长度
typedef struct{
//静态链表结构类型的定义
ElemType data;
//存储数据元素
int next;
//下一个元素的数组下标
)SLinkList[MaxSize];
静态链表以next==-1作为其结束的标志。静态链表的插入、删除操作与动态链表的相同，
只需要修改指针，而不需要移动元素。总体来说，静态链表没有单链表使用起来方便，但在一些
不支持指针的高级语言（如Basic）中，这是一种非常巧妙的设计方法。
2.3.6顺序表和链表的比较
1.存取（读/写）方式
顺序表既可以顺序存取，也可以随机存取，链表只能从表头开始依次顺序存取。例如在第i
个位置上执行存取的操作，顺序表仅需一次访问，而链表则需从表头开始依次访问i次。
2.逻辑结构与物理结构
采用顺序存储时，逻辑上相邻的元素，对应的物理存储位置也相邻。而采用链式存储时，逻
辑上相邻的元素，物理存储位置不一定相邻，对应的逻辑关系是通过指针链接来表示的。
3.查找、插入和删除操作
对于按值查找，顺序表无序时，两者的时间复杂度均为O（n)：顺序表有序时，可采用折半查
找，此时的时间复杂度为O(log2n)。对于按序号查找，顺序表支持随机访问，时间复杂度仅为O(1)，
而链表的平均时间复杂度为O(n)。顺序表的插入、删除操作，平均需要移动半个表长的元素。链
表的插入、删除操作，只需修改相关结点的指针域即可。
