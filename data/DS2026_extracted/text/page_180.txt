168
2026年数据结构考研复习指导
14.【解答】
本题采用递归的思想求解，若T和T2都是空树，则相似；若有一个为空另一个不空，则必
然不相似：否则递归地比较它们的左、右子树是否相似。递归函数的定义如下：
1）f（T1,T2）=1；若T1==T2==NULL。
2）f（T1，T2）=0；若T1和T2之一为NULL，另一个不为NULL。
3)f(T1,T2)=f(T1->lchild,T2->lchild)&&f(T1->rchild,T2->rchild);若T1
和T2均不为NULL。
因此，算法实现如下：
int similar(BiTree Tl,BiTree T2){
//采用递归的算法判断两棵二叉树是否相似
int leftS,rightS;
if（T1==NULL&&T2==NULL)
//两棵树皆空
return1;
else if(T1==NULL|IT2==NULL)
/只有一棵树为空
return0;
elser
/递归判断
leftS=similar(T1->lchild,T2->lchild);
rightS=similar(T1->rchild,T2->rchild);
return leftS&&rightS;
15.【解答】
树的WPL值=树中全部叶结点的带权路径长度之和。②根据带权二叉树的性质，二叉树的WPL
值=树中所有非叶结点的权值之和（记住该结论即可，不要求证明）。根据两种常见的计算方法，
本题不难写出下列两种解法。
1）算法的基本设计思想。
①本问题可采用递归算法实现。根据定义：
二叉树的WPL值=树中全部叶结点的带权路径长度之和
=根结点左子树中全部叶结点的带权路径长度之和+
根结点右子树中全部叶结点的带权路径长度之和
叶结点的带权路径长度=该结点的weight域的值x该结点的深度
设根结点的深度为0，若某结点的深度为d时，则其孩子结点的深度为d+1。
在递归遍历二叉树结点的过程中，若遍历到叶结点，则返回该结点的带权路径长度，否
则返回其左右子树的带权路径长度之和。
②若借用非叶结点的weight域保存其孩子结点中weight域值的和，则树的WPL等于树
中所有非叶结点weight域值之和。
采用后序遍历策略，在遍历二叉树T时递归计算每个非叶结点的weight域的值，则树T
的WPL等于根结点左子树的WPL加上右子树的WPL，再加上根结点中weight域的值。
在递归遍历二叉树结点的过程中，若遍历到叶结点，则returnO并且退出递归，否则
递归计算其左右子树的WPL和自身结点的权值。
2）二叉树结点的数据类型定义如下。
typedef struct node
int weight;
struct node *left,*right;
)BTree;
