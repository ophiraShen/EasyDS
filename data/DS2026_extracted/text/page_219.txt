第6章图
207
int vexnum,arcnum;
//图的当前顶点数和边数
)MGraph;
注意
①在简单应用中，可直接用二维数组作为图的邻接矩阵（顶点信息等均可省略）。
②当邻接矩阵的元素仅表示相应边是否存在时，EdgeType可用值为0和1的枚举类型。
③无向图的邻接矩阵是对称矩阵，对规模特大的邻接矩阵可采用压缩存储。
④邻接矩阵表示法的空间复杂度为O(n²)，其中n为图的顶点数1]。
命题追踪邻接矩阵的遍历的时间复杂度（2021）
图的邻接矩阵存储表示法具有以下特点：
①无向图的邻接矩阵一定是一个对称矩阵（并且唯一）。因此，在实际存储邻接矩阵时只需
存储上（或下）三角矩阵的元素。
命题追踪基于邻接矩阵的顶点的度的计算（2013、2021、2023）
②对于无向图，邻接矩阵的第i行（或第i列）非零元素（或非元素）的个数正好是顶点
i的度TD(v)。
③对于有向图，邻接矩阵的第i行非零元素（或非元素）的个数正好是顶点1的出度
OD（vi)：第i列非零元素（或非o元素）的个数正好是顶点i的入度ID（v)。
④用邻接矩阵存储图，很容易确定图中任意两个顶点之间是否有边相连。但是，要确定图
中有多少条边，则必须按行、按列对每个元素进行检测，所花费的时间代价很大。
③稠密图（边数较多的图）适合采用邻接矩阵的存储表示。
命题追踪计算A并说明A"[小V]的含义（2015）
③设图G的邻接矩阵为A，A"的元素A"[]U]等于由顶点i到顶点j的长度为n的路径的数
目。该结论了解即可，证明方法可参考离散数学教材。
6.2.2邻接表法
当一个图为稀疏图时，使用邻接矩阵法显然会浪费大量的存储空间，而图的邻接表法结合
了顺序存储和链式存储方法，大大减少了这种不必要的浪费。
所谓邻接表，是指对图G中的每个顶点v建立一个单链表，第i个单链表中的结点表示依
附于顶点v的边（对于有向图则是以顶点v为尾的弧），这个单链表就称为顶点v的边表（对于
有向图则称为出边表）。边表的头指针和顶点的数据信息采用顺序存储，称为顶点表，所以在邻
接表中存在两种结点：顶点表结点和边表结点，如图6.6所示。
顶点域
边表头指针
邻接点域
指针域
data
firstarc
adjvex
nextarc
顶点表结点
边表结点
图6.6顶点表和边表结点结构
顶点表结点由两个域组成：顶点域（data）存储顶点v的相关信息，边表头指针域
（firstarc）指向第一条边的边表结点。边表结点至少由两个域组成：邻接点域（adjvex）存
储与头结点顶点v，邻接的顶点编号，指针域（nextarc）指向下一条边的边表结点。
