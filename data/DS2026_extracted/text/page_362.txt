350
2026年数据结构考研复习指导
while(low<high)(
//循环跳出条件
while(low<high&&A[high]>=pivot)--high;
A[low]=A[high]；/将比枢轴小的元素移动到左端
while(low<high&&A[low]<=pivot) ++low;
A[high]=A[low]；//将比枢轴大的元素移动到右端
A[low]=pivot;
/枢轴元素存放到最终位置
return low;
//返回存放枢轴的最终位置
快速排序算法的性能分析如下：
命题追踪）快速排序中递归次数的影响因素分析（2010）
空间效率：快速排序是递归的，因此需要借助一个递归工作栈来保存每层递归调用的必要信
息，其容量与递归调用的最大层数一致。最好情况下为O(log2n)：最坏情况下，要进行n-1次递
归调用，因此栈的深度为 O(n)：平均情况下，栈的深度为O(log2n)。
时间效率：快速排序的运行时间与划分是否对称有关，快速排序的最坏情况发生在两个区域
始排序表基本有序或基本逆序时，就得到最坏情况下的时间复杂度为O(㎡²)。
有很多方法可以提高算法的效率：一种方法是尽量选取一个可以将数据中分的枢轴元素，如
从序列的头尾及中间选取三个元素，再取这三个元素的中间值作为最终的枢轴元素：或者随机地
从当前表中选取枢轴元素，这样做可使得最坏情况在实际排序中几乎不会发生。
在最理想的状态下，即Partition（）能做到最平衡的划分，得到的两个子问题的大小都不
可能大于 n/2，在这种情况下，快速排序的运行速度将大大提升，此时，时间复杂度为O(nlog2n)。
下的运行时间。快速排序是所有内部排序算法中平均性能最优的排序算法。
稳定性：在划分算法中，若右端区间有两个关键字相同，且均小于基准值的记录，则在交换
到左端区间后，它们的相对位置会发生变化，即快速排序是一种不稳定的排序算法。例如，表L=
{3,2.2}，经过一趟排序后L={2,2,3}，最终排序序列也是L={2,2,3}，显然，2与2的相对次
序已发生了变化。
命题追踪快速排序适合采用的存储方式（2011）
适用性：快速排序仅适用于顺序存储的线性表。
注意
在快速排序算法中，并不产生有序子序列，但每一趟排序后会将上一趟划分的各个无序子表的枢轴（基
准）元素放到其最终的位置上。
8.3.3本节试题精选
一、单项选择题
01．对n个不同的元素利用冒泡法从小到大排序，在（）情况下元素交换的次数最多。
A.从大到小排列好的
B.从小到大排列好的
C.元素无序
D.元素基本有序
02.若用冒泡排序算法对序列{10,14,26,29,41,52}从大到小排序，则需进行（）次比较。
A.3
B.10
C.15
D.25
