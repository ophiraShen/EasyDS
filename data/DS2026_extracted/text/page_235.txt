第6章图
223
1.DFS算法的性能分析
DFS算法是一个递归算法，需要借助一个递归工作栈，所以其空间复杂度为O（IV)。
遍历图的过程实质上是通过边查找邻接点的过程，因此两种遍历方式的时间复杂度都相
同，不同之处仅在于对顶点访问顺序的不同。采用邻接矩阵存储时，总时间复杂度为O(IV)。
采用邻接表存储时，总的时间复杂度为O(IV+|E)。
2.深度优先的生成树和生成森林
与广度优先搜索一样，深度优先搜索也会产生一棵深度优先生成树。当然，这是有条件的，
即对连通图调用DFS才能产生深度优先生成树，否则产生的将是深度优先生成森林，如图6.13所
示。与BFS类似，基于邻接表存储的深度优先生成树是不唯一的。
图6.13图的深度优先生成森林
6.3.3图的遍历与图的连通性
图的遍历算法可以用来判断图的连通性。对于无向图来说，若无向图是连通的，则从任意
一个结点出发，仅需一次遍历就能够访问图中的所有顶点；若无向图是非连通的，则从某一个
顶点出发，一次遍历只能访问到该顶点所在连通分量的所有顶点，而对于图中其他连通分量的
顶点，则无法通过这次遍历访问。对于有向图来说，若从初始顶点到图中的每个顶点都有路
径，则能够访问到图中的所有顶点，否则不能访问到所有顶点。
因此，在BFSTraverse（）或DFSTraverse（）中添加了第二个for循环，再选取初始点
继续进行遍历，以防止一次无法遍历图的所有顶点。对于无向图，上述两个函数调用BFS（G，i）
或DFS（G，i）的次数等于该图的连通分量数；而对于有向图则不是这样，因为一个连通的有向图
分为强连通的和非强连通的，它的连通子图也分为强连通分量和非强连通分量，非强连通分量一
次调用BFS（G，i）或DFS（G，i）不一定能访问到该子图的所有顶点，如图6.14所示。
图6.14有向图的非强连通分量
6.3.4本节试题精选
一、单项选择题
01.下列关于广度优先算法的说法中，正确的是（）。
1.当各边的权值相等时，广度优先算法可以解决单源最短路径问题
II.当各边的权值不等时，广度优先算法可用来解决单源最短路径问题
III.广度优先遍历算法类似于树中的后序遍历算法
IV.实现图的广度优先算法时，使用的数据结构是队列
A. I、IV
B.II、III、IV
C. II、IV
D.I、III、IV
02.下列关于图的说法中，错误的是（）。
公众号
小兔网盘
免费网课+无水印PDF
