292
2026年数据结构考研复习指导
黑结点的数量相同。图7.18中的6-2和6-15-18-20就是这样的两条路径。
结论2：有n个内部结点的红黑树的高度h≤2log2（n+1)。
证明：由结论1可知，从根到叶结点（不含叶结点）的任何一条简单路径上都至少有一半是
黑结点，因此，根的黑高至少为h/2，于是有n≥2h㎡2-1，即可求得结论。
由结论2也可推出，黑高为h的红黑树的内部结点数最少是2"-1，最多是22"-1。
可见，红黑树的“适度平衡”，由AVL树的“高度平衡”，降低到“任意一个结点左右子
树的高度，相差不超过2倍”，也降低了动态操作时调整的频率。对于一棵动态查找树，若插入
和删除操作比较少，查找操作比较多，则采用AVL树比较合适，否则采用红黑树更合适。但由
于维护这种高度平衡所付出的代价比获得的效益大得多，红黑树的实际应用更广泛，C++中的
map和set（Java中的TreeMap和TreeSet）就是用红黑树实现的。
2.红黑树的插入
红黑树的插入过程和二叉查找树的插入过程基本类似，不同之处在于，在红黑树中插入新
结点后需要进行调整（主要通过重新着色或旋转操作进行），以满足红黑树的性质。
结论3：新插入红黑树中的结点初始着为红色。
假设新插入的结点初始着为黑色，则这个结点所在的路径比其他路径多出一个黑结点（几乎
每次插入都破坏性质），调整起来也比较麻烦。若插入的结点是红色的，则此时所有路径上的
黑结点数量不变，仅在出现连续两个红结点时才需要调整，而且这种调整也比较简单。
设结点：为新插入的结点。插入过程描述如下：
1)用二叉查找树插入法插入，并将结点：着为红色。若结点z的父结点是黑色的，无须做任
何调整，此时就是一棵标准的红黑树，结束。
2）若结点=是根结点，则将=着为黑色（树的黑高增1），结束。
3）若结点=不是根结点，且=的父结点=.p是红色的，则分为下面三种情况，区别在于=的
叔结点y的颜色不同，因=.p是红色的，插入前的树是合法的，根据性质②和④，爷结点
=.p.p 必然存在且为黑色。性质④只在=和=.p之间被破坏了。
情况1：=的叔结点y是黑色的，且=是一个右孩子。
情况2：=的叔结点y是黑色的，且=是一个左孩子。
每棵子树T、T、T和T4都有一个黑色根结点，且具有相同的黑高。
情况1（LR，先左旋，再右旋），即=是其爷结点的左孩子的右孩子。先做一次左旋将此情
形转变为情况2（变为情况2后再做一次右旋），左旋后=和父结点=.p交换位置。因为=和=.p
都是红色的，所以左旋操作对结点的黑高和性质5都无影响。
情况2（LL，右单旋），即=是其爷结点的左孩子的左孩子。做一次右旋，并交换=的原父
结点和原爷结点的颜色，就可以保持性质，也不会改变树的黑高。这样，红黑树中也不再有连
续两个红结点，结束。情况1和情况2的调整方式如图7.19所示。
注：p表示父结点；p.p表示爷结点
情况1
情况2
红结点
黑结点
图7.19情况1和情况2的调整方式
