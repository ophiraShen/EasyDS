第2章线性
表
31
L=NULL;
return true;
注意
设p为指向链表结点的结构体指针，则*p表示结点本身，因此可用p->data或（*p）.data访问*p
这个结点的数据域，二者完全等价。成员运算符（.）左边是一个普通的结构体变量，而指向运算符（一>）
左边是一个结构体指针。通过（*p）.next可以得到指向下一个结点的指针，因此（*（*p）.next）.data
就是下一个结点中存放的数据，或者直接用p->next->data。
2.求表长操作
求表长操作是计算单链表中数据结点的个数，需要从第一个结点开始依次访问表中每个结
点，为此需设置一个计数变量，每访问一个结点，其值加1，直到访问到空结点为止。
int Length(LinkList L){
int len=0;
//计数变量，初始为0
LNode *p=L;
while(p->next!=NULL){
p=p->next;
len++;
//每访问一个结点，计数加1
return len;
求表长操作的时间复杂度为O(n)。另需注意的是，因为单链表的长度是不包括头结点的，因
此不带头结点和带头结点的单链表在求表长操作上会略有不同。
3.按序号查找结点
从单链表的第一个结点开始，沿着next域从前往后依次搜索，直到找到第i个结点为止，
则返回该结点的指针：若i大于单链表的表长，则返回NULL。
LNode *GetElem(LinkList L,int i）(
LNode *p=L;
//指针p指向当前扫描到的结点
int j=0;
//记录当前结点的位序，头结点是第0个结点
while(p!=NULL&&j<i）
//循环找到第i个结点
p=p->next;
j++;
return
!d
//返回第i个结点的指针或NULL
按序号查找操作的时间复杂度为O(n)。
4.按值查找表结点
从单链表的第一个结点开始，从前往后依次比较表中各结点的数据域，若某结点的data域
等于给定值e，则返回该结点的指针：若整个单链表中没有这样的结点，则返回NULL。
LNode *LocateElem(LinkList L,ElemType e){
LNode *p=L->next;
p=p->next;
return p;
/找到后返回该结点指针，否则返回NULL
按值查找操作的时间复杂度为O(n)。
5.插入结点操作
插入结点操作将值为×的新结点插入到单链表的第i个位置。先检查插入位置的合法性，然
