第1章绪
论
9
T(n)=O(n²)，时间复杂度 T(n)是问题规模n的函数，其问题规模仍然是n而不是n²。
04.B
算法的空间复杂度为O(1)，表示执行该算法所需的辅助空间大小相比输入数据的规模来说是
一个常量，而不表示该算法执行时不需要任何空间或辅助空间。
05.D
A的最高阶是nlog2n，时间复杂度是O(nlog2n)。B的最高阶是n²，时间复杂度是O(n²)。C
的最高阶是nlog2n，时间复杂度是O(nlog2n)。D的最高阶是log2n，时间复杂度是O(log2n)。
06.D
找出基本运算i=i*2，设执行次数为t，2'≤n，即1≤log2n，故时间复杂度T(n)=O(log2n)。
更直观的方法：计算基本运算i=i*2的执行次数（每执行一次i乘以2），其中判断条件可
理解为2'=n，即t= log2n，则T(n)=O(log2n)。
07.C
基本运算为i++，设执行次数为1，有xix≤n，即≤n。因此有≤n，则 T(n)=O（）。
08.D
这是冒泡排序的算法代码，考查最坏情况下的元素交换次数（若觉得理解起来有困难，则可
在学完第8章后再回顾）。当所有相邻元素都为逆序时，则最后一行的语句每次都会执行。此时，
T(n)=>
-1=(n-2)(n-1)/2=O(n²)
=2/=1
1=2
所以在最坏情况下该语句的频度是0（n²)。
09.A
当程序段中有条件判断语句时，取分支路径上的最大时间复杂度。
10.A
m++语句的执行次数为
=n(n+1)
11.C
本题求的是递归调用的时间复杂度，递归调用可视为多重循环，每次递归执行的基本语句是
if (n==1)return 1;,因此可认为单层循环的执行次数为 1,设递归次数为 t,2'≤n,即t≤log2n,
共执行了 log2n 次递归调用，总执行次数 T=log2n× 1，所以时间复杂度为 O(log2n)。
循环变量i
单层循环语句
单层循环执行次数
n
if（n==l) return 1;
1
n/2
if（n==l) return 1;
1
n/4
if（n==l）return1;
1
..
.".
1
if(n==1)
returnl;
1
12.A
基本运算（执行频率最高的语句）为x=2*x，每执行一次，×乘以2，设执行次数为1，则
有 21+1<n/2，所以 1<log2(n/2)- 1 =log2n-2，得 T(n)= O(log2n)。
13.B
本题求的是递归调用的时间复杂度，递归调用可视为多重循环，每次递归执行的基本语句是
if（n<=1）return 1;，因此可以认为单层循环的执行次数为1，共执行了n次递归调用，总
