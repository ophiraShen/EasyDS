58
2026年数据结构考研复习指导
while(q!=NULL){
//用p和g分别遍历两个链表
if（(p->data+q->data）>mx）//用 mx 记录最大值
mx=p->data+q->data;
p=p->next;
q=q->next;
return mx;
3）本算法的时间复杂度为O（n)，空间复杂度为0（1）。
17.【解答】
1）算法的基本设计思想：
问题的关键是设计一个尽可能高效的算法，通过链表的一次遍历，找到倒数第k个结点的位
置。定义两个指针变量p和q，初始时均指向头结点的下一个结点（链表的第一个结点），p指针
沿链表移动：当p指针移动到第k个结点时，a指针开始与p指针同步移动：当p指针移动到最
后一个结点时，9指针所指示结点为倒数第k个结点。以上过程对链表仅进行一遍扫描。
2）算法的详细实现步骤如下：
①count=0，p和q指向链表表头结点的下一个结点。
②若p为空，转。
③若count等于k，则q指向下一个结点：否则，count=count+1。
④p指向下一个结点，转②。
若count等于k，则查找成功，输出该结点的data域的值，返回1；否则，说明k值
超过了线性表的长度，查找失败，返回0。
③算法结束。
3）算法实现如下：
typedef int ElemType;
//链表数据的类型定义
typedef struct LNode
//链表结点的结构定义
ElemType data;
//结点数据
struct LNode *link;
//结点链接指针
}LNode,*LinkList;
int Search_k(LinkList
list,int k）{
int count=0;
while(p!=NULL){
/遍历链表直到最后一个结点
if （count<k）count++;
//计数，若count<k只移动p
else q=q->link;
p=p->link;
Ⅱ之后让p、q 同步移动
//while
if(count<k)
return0;
//查找失败返回0
else
//否则打印并返回1
printf("%d",q->data);
return1;
评分说明
若所给算法采用一遍扫描方式就能得到正确结果，则可给满分15分；若采用两遍或多遍扫描才能得
到正确结果，则最高分为10分。若采用递归算法得到正确结果，则最高给10分；若实现算法的空间复杂
度过高（使用了大小与k有关的辅助数组），但结果正确，则最高给10分。
