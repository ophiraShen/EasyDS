第6章图
267
2）用C语言描述的算法如下：
intuniquely（MGraphG)（//判定有向图是否存在唯一的拓扑序列
int *degree,i,j,count=0,in0=-l,prev_in0;
degree=(int*)malloc(G.numVertices*sizeof(int));
for（j=0;j<G.numVertices;j++）{//计算各顶点的入度
degree[j]=0;
for(i=0;i<G.numVertices;i++)
degree[j]+=G.Edge[i][j];
if(degree[j]==0){
if（in0==-1） in0=j;
//入度为0的顶点
else in0=-2;
//有多个入度为0的顶点
while(in0>=0){
count++;
prev_in0=in0;
in0=-1;
for(j=0;j<G.numVertices;j++)
if(G.Edge[prev_in0][j]>0){
if(--degree[j]==0){
//邻接点入度值减1
if（in0==-1）in0=j；//入度为0的顶点
else in0=-2;
//有多个入度为0的顶点
free(degree);
if(count==G.numVertices) return 1;
else return 0;
归纳总结
1.关于图的基本操作
本章中的很多程序对采用邻接表或邻接矩阵的存储结构都适用，主要原因是在图的基本操
作函数中保持了相同的参数和返回值，而封闭了内部实现细节。
例如，取x邻接顶点y的下一个邻接顶点的函数NextNeighbor（G,x,y)。
1）用邻接矩阵作为存储结构
int NextNeighbor(MGraph& G,int x,int y){
if（x!=-lααy!=-1）{
for（int col=y+1;col<G.vexnum;col++)
if(G.Edge[x][col]>0 && G.Edge[x][col]<maxWeight)
return col;
//maxWeight代表∞
return -1;
2）用邻接表作为存储结构
int NextNeighbor(ALGraph& G,int x,int y){
if(x!=-1）{
//顶点x存在
ArcNode *p=G.vertices[x].first;
//对应边链表第-
一个边结点
while(p!=NULL && p->data!=y)
//寻找邻接顶点y
p=p->next;
if（p!=NULL && p->next!=NULL)
