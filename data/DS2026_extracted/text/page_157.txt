第5章
树与二叉树
145
(a)
(b)
图5.15两棵不同的二叉树
5.3.2线索二叉树
1.线索二叉树的基本概念
遍历二叉树是以一定的规则将二叉树中的结点排列成一个线性序列，从而得到几种遍历序
列，使得该序列中的每个结点（第一个和最后一个除外）都有一个直接前驱和直接后继。
命题追踪线索二叉树的定义（2010）
传统的二叉链表存储仅能体现一种父子关系，不能直接得到结点在遍历中的前驱或后继。前面提
到，在含n个结点的二叉树中，有n+1个空指针。这是因为每个叶结点都有2个空指针，每个度为1
的结点都有1个空指针，空指针总数为2ng+n，又no=n+1，所以空指针总数为ng+n+n+1=n+1。
由此设想能否利用这些空指针来存放指向其前驱或后继的指针？这样就可以像遍历单链表那样方便地
遍历二叉树。引入线索二叉树正是为了加快查找结点前驱和后继的速度。
规定：若无左子树，令lchild指向其前驱结点；若无右子树，令rchild指向其后继结点。
如图5.16所示，还需增加两个标志域，以标识指针域指向左（右）孩子或前驱（后继）。
lchild
ltag
data
rtag
rchild
图5.16线索二叉树的结点结构
其中，标志域的含义如下：
[0,
lchild域指示结点的左孩子
ltag
[1,
lchild域指示结点的前驱
[0,
rchild域指示结点的右孩子
[1，
rchild域指示结点的后继
线索二叉树的存储结构描述如下：
typedef struct ThreadNode{
ElemType data;
//数据元素
struct ThreadNode *lchild,*rchild;
//左、右孩子指针
int ltag,rtag;
//左、右线索标志
)ThreadNode,*ThreadTree;
以这种结点结构构成的二叉链表作为二叉树的存储结构，称为线索链表，其中指向结点前驱
和后继的指针称为线索。加上线索的二叉树称为线索二叉树。
2.中序线索二叉树的构造
二叉树的线索化是将二叉链表中的空指针改为指向前驱或后继的线索。而前驱或后继的信息
只有在遍历时才能得到，因此线索化的实质就是遍历一次二叉树。
命题追踪
中序线索二叉树中线索的指向（2014）
以中序线索二叉树的建立为例。附设指针pre指向刚刚访问过的结点，指针p指向正在访
问的结点，即pre指向p的前驱。在中序遍历的过程中，检查p的左指针是否为空，若为空就
将它指向pre；检查pre的右指针是否为空，若为空就将它指向p，如图5.17所示。
