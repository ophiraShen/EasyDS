第8章排
391
38
121
图8.183路平衡归并的归并树
命题追踪构造三叉哈夫曼树及相关的分析和计算（2013）
显然，归并方案不同，所得归并树不同，树的带权路径长度（I/O次数）亦不同。为了优化
归并树的WPL，可以将哈夫曼树的思想推广到m叉树的情形，在归并树中，让记录数少的初始
归并段最先归并，记录数多的初始归并段最晚归并，就可以建立总的1/O次数最少的最佳归并树。
上述9个初始归并段可构造成一棵如图8.19所示的归并树，按此树进行归并，仅需对外存进行
446次读/写，这棵归并树称为最佳归并树。
121
图8.193路平衡归并的最佳归并树
图8.19中的哈夫曼树是一棵严格3叉树，即树中只有度为3或0的结点。若只有8个初始归
并段，如上例中少了一个长度为30的归并段。若在设计归并方案时，缺额的归并段留在最后，
即除最后一次做二路归并外，其他各次归并仍是3路归并，此归并方案的1/0次数为386。显然，
这不是最佳方案。正确的做法是：若初始归并段不足以构成一棵严格k叉树（也称正则k叉树）
时，则需添加长度为0的“虚段”，按照哈夫曼树的原则，权为0的叶子应离树根最远。因此，
最佳归并树应如图8.20所示，此时的1/0次数仅为326。
图8.208个归并段的最佳归并树
如何判定添加虚段的数目？
设度为0的结点有no个，度为k的结点有nk个，归并树的结点总数为n，则有：
n=nk+no
（总结点数=度为k的结点数+度为0的结点数）
n=knk+1
（总结点数=所有结点的度数之和+1）
因此，对严格k叉树有no=(k-1)nk+1，由此可得nk=(no-1)/(k-1)。
若(n。-1)%(k-1)=0（%为取模运算)，则说明这ng个叶结点（初始归并段）正好可以
构造k叉归并树。此时，内结点有nk个。
若(ng-1)%（k-1)=u≠0，则说明对于这no个叶结点，其中有u个多余，不能包含在k
叉归并树中。为构造包含所有no个初始归并段的k叉归并树，应在原有nk个内结点的
