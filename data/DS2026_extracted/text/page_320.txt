308
2026年数据结构考研复习指导
第三步：插入结点28后，需要根结点23的子树做RL调整
34
98
第四步：插入结点107后，需要根结点98的子树做RL调整。
04.【解答】
当各关键字的查找概率相等时，最佳二叉排序树应是高度最小的二叉排序树。构造过程分两
步走：首先对各关键字按值从小到大排序，然后仿照折半查找的判定树的构造方法构造二叉排序
树。这样得到的就是最佳二叉排序树，结果如下图所示。
05.【解答】
对二叉排序树来说，其中序遍历序列为一个递增有序序列。因此，对给定的二叉树进行中序
遍历，若始终能保持前一个值比后一个值小，则说明该二叉树是一棵二叉排序树。算法实现如下：
KeyType predt=-32767;
/lpredt为全局变量，保存当前结点中序前驱
的值，初值为-∞o
int JudgeBST(BiTree bt){
int b1,b2;
if(bt==NULL)
I/空树
return1;
elser
b1=JudgeBST(bt->lchild);
1//判断左子树是否是二叉排序树
if（b1==01lpredt>=bt->data）/若左子树返回值为0或前驱大于或等于当前结点
return 0;
//则不是二叉排序树
predt=bt->data;
/保存当前结点的关键字
b2=JudgeBST(bt->rchild);
//判断右子树
returnb2;
//返回右子树的结果
06.【解答】
算法思想：设二叉树采用二叉链表存储结构。在二叉排序树中，查找一次就下降一层。因此，
查找该结点所用的次数就是该结点在二叉排序树中的层次。采用二叉排序树非递归查找算法，用
n保存查找层次，每查找一次，n就加1，直到找到相应的结点。算法如下：
int level(BiTree bt,BSTNode *p){
int n=0;
Ⅱ统计查找次数
BiTree t=bt;
if(bt!=NULL）{
n++;
while(t->data!=p->data)(
if(p->data<t->data)
/在左子树中查找
t=t->lchild;
