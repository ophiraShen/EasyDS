第2章线性表
47
指针找到*p结点的时间复杂度为O(n)。对于选项D，删除尾结点*p时，需要找到*p的前一个
结点，时间复杂度为 O(n)。对于C，执行这四种算法的时间复杂度均为O(1)。
25.B
要求用O(1)的时间将两个循环单链表头尾相接，并未指明哪个链表接在另一个链表之后，所
以对两个链表都要在0（1)的时间找到头结点和尾结点。因此，两个指针应都指向尾结点。
26.A
在循环单链表中，删除首元结点后，要保持链表的循环性，因此需要找到首元结点的前驱。
当链表带头结点时，其前驱就是头结点，因此不论是表头指针还是表尾指针，删除首元结点的时
间都为O(1)。当链表不带头结点时，其前驱是尾结点，因此，若有表尾指针，就可在0(1)的时间
找到尾结点：若只有表头指针，则需要遍历整个链表找到尾结点，时间为O（n）。
27.D
对一个空循环单链表，有 head->next==head，推理 head->next->next==head->
唯一的元素结点，该元素结点的 next 域指向头结点，因此也有head->next->next=head。
28.D
对于两种双链表，删除首结点的时间复杂度都是O(1)。对于非循环双链表，删除尾结点的时
间复杂度是O(n)：对于循环双链表，删除尾结点的时间复杂度是O(1)。
29.D
对于选项A，在最后一个元素之后插入元素的情况与普通单链表相同，时间复杂度为O（n)；而
删除第一个元素时，为保持循环单链表的性质（尾结点指向第一个结点），要先遍历整个链表找到尾
结点，再做删除操作，时间复杂度为O(n)。对于选项B，双链表的情况与单链表的相同，一个是O(n)，
一个是O（1)。对于选项C，在最后一个元素之后插入一个元素，要遍历整个链表才能找到插入位置，
时间复杂度为O(n)：删除第一个元素的时间复杂度为O（1)。对于选项D，与选项A的分析对比，有
尾结点的指针，省去了遍历链表的过程，因此时间复杂度均为O(1)。
30.B
静态链表采用数组表示，因此需要预先分配较大的连续空间，静态链表同时还具有一般链表
的特点，即插入和删除不需要移动元素。
31.B
静态链表的存储空间虽然是顺序分配的，但元素的存储不是顺序的，查找时仍然需要按链依
次进行，而插入、删除都不需要移动元素。静态链表的存储空间是一次性申请的，能容纳的最大
元素个数在定义时就已确定。并非每个空间都存储了元素，因此会造成存储空间的浪费。
32.D
选项A的第二句代码，相当于将p前驱结点的后继指针指向其自身，错误；选项B和C的
第一句代码，相当于将p后继结点的前驱指针指向其自身，错误。只有选项D正确。
33.D
根据存储状态，单链表的结构如下图所示。
1008H
1000H
1010H
Ht00
00CH
C
e
d
1014H
