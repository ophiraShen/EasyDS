34
2026年数据结构考研复习指导
LinkListList_HeadInsert（LinkList&L）//逆向建立单链表
LNode *s; int x;
//设元素类型为整型
L=(LNode*)malloc(sizeof(LNode)）;
//创建头结点
L->next=NULL;
/初始为空链表
scanf("%d",&x）;
//输入结点的值
whi1e(x!=9999)(
//输入9999表示结束
s=（LNode*）malloc（sizeof（LNode））;//创建新结点
s->data=x;
s->next=L->next;
L->next=s;
//将新结点插入表中，L为头指针
scanf（"d",&x）;
return L;
采用头插法建立单链表时，读入数据的顺序与生成的链表中元素的顺序是相反的，可用来实
现链表的逆置。每个结点插入的时间为O(1)，设单链表长为n，则总时间复杂度为O(n)。
思考
若单链表不带头结点，则上述代码中哪些地方需要修改？①
8.采用尾插法建立单链表
头插法建立单链表的算法虽然简单，但生成的链表中结点的次序和输入数据的顺序不一致。
若希望两者次序一致，则可采用尾插法。该方法将新结点插入到当前链表的表尾，为此必须增加
一个尾指针r，使其始终指向当前链表的尾结点，如图2.8所示。算法实现如下：
每次将s所指的结点插在末端
图2.8采用尾插法建立单链表
LinkList List_TailInsert（LinkList&L）//正向建立单链表
int x;
//设元素类型为整型
L=（LNode*)malloc(sizeof（LNode)）;
//创建头结点
LNode *s,*r=L;
//r为表尾指针
scanf("d"，&x）;
/输入结点的值
while(x!=9999){
//输入9999表示结束
s=（LNode*)malloc（sizeof(LNode));
s->data=x;
r->next=s;
r=s;
//r指向新的表尾结点
scanf("%d",&x）;
r->next=NULL;
//尾结点指针置空
return L;
因为附设了一个指向表尾结点的指针，所以时间复杂度和头插法的相同。
①主要修改之处：因为在头部插入新结点，每次插入新结点后，都需要将它的地址赋值给头指针L。
