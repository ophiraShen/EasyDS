{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：请解释什么是链表？链表与数组相比有什么区别？\\n学生回答：链表是一种由节点组成的线性数据结构，每个节点包含数据和指向下一个节点的指针。链表与数组相比，链表在插入和删除操作时更高效，但查找元素的时间复杂度较高。\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个数据结构教师。学生已经理解了链表的基本概念，但未涉及链表的变种和空间复杂度。\\n请引导学生思考：\\n1. 链表与数组相比，在内存分配和存储方式上有什么不同？\\n2. 链表有哪些常见的变种，例如双向链表、循环链表？\\n3. 链表的空间复杂度是多少？相比数组，链表的内存开销如何？\\n通过问题引导学生深入思考链表的变种和空间复杂度。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：红黑树与AVL树的区别\\n学生回答：两者都是平衡二叉树，红黑树通过颜色属性保持平衡\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n学生混淆不同平衡策略：\\n1. 对比连续插入场景的旋转次数\\n2. 可视化展示两者的高度差限制\\n3. 分析磁盘存储场景下的选择依据\\n使用对比表格澄清核心差异。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：什么是二叉树的中序遍历？\\n学生回答：中序遍历就是先遍历左子树，然后访问根节点，最后遍历右子树。\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个经验丰富的数据结构教师。学生对中序遍历的概念有基本了解，但未提及具体实现和应用。请引导学生进一步思考：1. 中序遍历的具体代码实现是怎样的？2. 中序遍历在哪些场景下有实际应用？保持耐心，通过提问帮助学生深入理解中序遍历。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：哈希表如何处理冲突？\\n学生回答：可以用链表把相同哈希值的元素串起来\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n作为数据结构导师，学生仅知链地址法，需拓展认知：\\n1. 设计场景比较不同冲突解决方案\\n2. 演示线性探测的具体过程\\n3. 讨论哈希函数设计的双重影响\\n使用对比分析法揭示技术选型逻辑。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：请简述栈的特点。\\n学生回答：栈是一种后进先出的数据结构，只能在一端进行插入和删除操作。\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个专业的数据结构教师。学生对栈的基本特点有清晰的认识，但未提及栈的操作细节和应用场景。请引导学生进一步探讨：1. 栈的插入和删除操作具体是如何进行的？2. 栈在编程中通常用于哪些情况？通过具体例子帮助学生深化对栈的理解。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：请解释堆排序的工作原理。\\n学生回答：堆排序是先建立一个堆，然后将堆顶元素与末尾元素交换，再重新调整堆。\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个排序算法教师。学生理解了堆排序的基本步骤，但缺少对堆构建、时间复杂度和稳定性的理解。\\n    请引导学生思考：\\n1. 如何构建堆？堆是如何通过调整满足堆的性质的？\\n2. 堆排序的时间复杂度是什么？在不同情况下如何分析？\\n3. 堆排序是否稳定？为什么？\\n通过提问帮助学生理解堆排序的细节和性能分析。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：请解释图的最短路径算法Dijkstra的基本原理。\\n学生回答：Dijkstra算法通过不断选择最短的边，逐步扩展到所有节点，找到最短路径。\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个图算法教师。学生理解了Dijkstra算法的基本过程，但缺少对算法复杂度、边权处理的理解。\\n    请引导学生思考：\\n1. Dijkstra算法的时间复杂度是多少？如何优化？\\n2. Dijkstra算法如何处理边权为负的情况？\\n3. Dijkstra与Bellman-Ford算法有何区别？\\n通过问题帮助学生理解算法优化及复杂度分析。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：请简要介绍深度优先搜索（DFS）算法。\\n学生回答：深度优先搜索是一种图的遍历算法。它从一个起始节点开始，尽可能深地探索每个分支。当遇到没有未访问的邻接节点时，算法回溯到最近的一个节点，并继续搜索其他未访问的节点，直到所有节点都被访问到。DFS可以使用递归或栈实现。\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个算法教师。学生已经清楚地理解了深度优先搜索的基本过程，并且能够区分递归与栈的实现。\\n    请引导学生思考：\\n1. DFS如何在有向图和无向图中应用？\\n2. DFS的时间复杂度是什么？如何进行优化？\\n3. 在实际应用中，DFS常用于哪些问题？\\n通过问题引导学生理解DFS的性能及其在实际问题中的应用。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：链表和数组有什么区别？\\n学生回答：链表是动态的，不需要连续的内存空间，而数组需要连续的内存空间。\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个专业的数据结构教师。学生对链表和数组的区别有基本认识，但未提及时间复杂度和适用场景。请引导学生进一步探讨：1. 链表和数组在插入、删除、查找操作上的时间复杂度分别是多少？2. 在实际编程中，何时使用链表，何时使用数组？用引导性问题帮助学生更全面地理解这两种数据结构。\"}"}
