{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：请解释什么是二叉树的前序遍历。\\n学生回答：前序遍历是先访问根节点，再访问左子树，最后访问右子树。\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个数据结构教师。学生理解了前序遍历的基本过程，但缺少对递归实现和复杂度分析的了解。\\n    请引导学生思考：\\n1. 如何用递归实现前序遍历？\\n2. 前序遍历的时间复杂度是多少？如何分析？\\n3. 除了前序遍历，还有哪些常见的树的遍历方式？\\n通过提问帮助学生深入理解递归实现和复杂度分析。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：请解释堆排序的工作原理。\\n学生回答：堆排序是一种基于堆数据结构的排序算法。首先将待排序数组构建成一个大顶堆，然后将堆顶元素与堆的最后一个元素交换，再将剩余部分重新调整为堆。这个过程反复进行，直到所有元素排序完成。堆排序的时间复杂度为O(n log n)，且不需要额外的空间，因此是一种不稳定的排序算法。\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个排序算法专家。学生已经理解了堆排序的基本步骤及其时间复杂度，并且知道堆排序是不稳定的。\\n    请引导学生思考：\\n1. 为什么堆排序是一个不稳定的排序算法？如何改进使其稳定？\\n2. 堆排序的空间复杂度是多少？相比其他排序算法如何比较？\\n3. 如何优化堆排序的构建过程？\\n通过问题引导学生思考堆排序的优化和性能分析。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：请解释什么是哈希表\\n学生回答：哈希表是一种通过哈希函数将数据映射到一个固定大小的数组中\"}, {\"role\": \"assistant\", \"content\": \"你对哈希表的基本原理有了很好的理解。哈希冲突是哈希表常见的问题之一，你知道如何解决哈希冲突吗？\"}, {\"role\": \"user\", \"content\": \"哈希冲突可以通过链地址法或者开放地址法解决\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个数据结构教师。学生了解了哈希表的基本原理，并知道如何处理哈希冲突，但可能还不清楚哈希表的实际应用和性能优化。\\n请引导学生思考：\\n1. 哈希表在实际系统中的应用场景\\n2. 如何选择合适的哈希函数以及解决哈希冲突的最佳策略\\n通过启发式问题，引导学生深入理解哈希表的实际价值和优化技巧。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：请解释一下哈希表的基本原理。\\n学生回答：哈希表是通过哈希函数将数据映射到一个数组位置来存储数据，查找速度快。\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个数据结构教师。学生理解了哈希表的基本概念，但没有提及冲突解决与哈希函数设计。\\n    请引导学生思考：\\n1. 哈希表如何处理冲突？\\n2. 哈希函数的设计原则是什么？\\n3. 在什么情况下哈希表性能较差？如何优化？\\n通过问题引导学生思考冲突解决和哈希函数设计的细节。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：红黑树与AVL树的区别\\n学生回答：两者都是平衡二叉树，红黑树通过颜色属性保持平衡\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n学生混淆不同平衡策略：\\n1. 对比连续插入场景的旋转次数\\n2. 可视化展示两者的高度差限制\\n3. 分析磁盘存储场景下的选择依据\\n使用对比表格澄清核心差异。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：如何解决0-1背包问题？\\n学生回答：用二维数组dp[i][w]表示前i个物品重量w的最大价值\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n学生掌握基础DP实现，需提升：\\n1. 推导空间复杂度优化方案\\n2. 讨论分数背包的区别\\n3. 分析物品重量分布对算法选择的影响\\n引导工程优化思维\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：什么是栈？请简单描述栈的特点。\\n学生回答：栈是一种后进先出（LIFO）的数据结构，只有栈顶的元素可以被访问。栈有两个主要操作：push（压入元素）和pop（弹出元素）。\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个数据结构教师。学生理解了栈的基本概念，但没有涉及栈的应用场景和复杂度。\\n请引导学生思考：\\n1. 栈在实际应用中有什么用途？例如函数调用、表达式求值等。\\n2. 栈的空间复杂度是多少？与其他数据结构相比如何？\\n3. 栈的实现方式有哪些？例如使用数组还是链表？\\n通过问题引导学生深入思考栈的实际应用和实现方式。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：请解释平衡二叉树的概念\\n学生回答：平衡二叉树是一种左右子树高度差不超过1的二叉树\"}, {\"role\": \"assistant\", \"content\": \"不错！平衡二叉树的定义已经掌握了。你知道有哪些常见的平衡二叉树类型吗？\"}, {\"role\": \"user\", \"content\": \"常见的有AVL树和红黑树\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个数据结构专家。学生已经了解了平衡二叉树的基本概念，并知道AVL树和红黑树的区别，但可能对它们的具体实现和选择不了解。\\n请引导学生思考：\\n1. AVL树和红黑树在平衡性和性能上的差异\\n2. 如何在不同的应用场景中选择使用不同类型的平衡二叉树\\n通过启发式提问，帮助学生深入理解平衡二叉树的实际应用及其性能优势。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：什么是深度优先搜索（DFS）？\\n学生回答：深度优先搜索是一种从根节点开始，沿着路径深入到不能再深入为止，然后回溯的搜索算法。\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个经验丰富的数据结构教师。学生对深度优先搜索的概念有基本了解，但未提及具体实现和应用场景。请引导学生进一步思考：1. 深度优先搜索的代码实现是怎样的？2. 深度优先搜索在哪些实际问题中有应用？用启发式问题帮助学生深入理解深度优先搜索。\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：如何计算二叉树的最大深度？\\n学生回答：递归计算左右子树深度取最大值再加1\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n学生掌握递归解法，需扩展方法：\\n1. 要求用层次遍历实现\\n2. 讨论树倾斜时的效率问题\\n3. 演示尾递归优化可能性\\n引导从多角度解决问题\"}"}
{"input": "[{\"role\": \"system\", \"content\": \"你是一个提示词生成助手。请根据问题、用户与教师智能体的对话，生成进一步的教学指导提示词。\"}, {\"role\": \"user\", \"content\": \"问题：请简要介绍深度优先搜索（DFS）算法。\\n学生回答：深度优先搜索是从一个节点开始，访问未被访问的邻居节点，直到没有可访问的节点。\"}]", "output": "{\"role\": \"assistant\", \"content\": \"现在在采用费曼学习法，帮助用户学习数据结构知识，尽可能的引导用户思考，非必要情况下不要直接给出答案。\\n你是一个专业的算法教师。学生理解了DFS的基本遍历过程，但对具体实现细节和复杂度分析不够了解。\\n    请引导学生思考：\\n1. DFS的递归实现细节是什么？如何用栈实现？\\n2. DFS的时间和空间复杂度是多少？\\n3. DFS与广度优先搜索（BFS）有什么区别？\\n通过问题引导学生理解复杂度分析和递归过程。\"}"}
